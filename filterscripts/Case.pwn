#include <a_samp>
#include <dudb>

//----------------------------
//----------------------------
//  Full house script by Antironix!
//  Just don't remove the credits!
//----------------------------
//----------------------------
#define MAX_DISTANCE_TO_PROP 1.5
#define MAX_HOUSES 1000
#define MAX_RENTCOST 50000
#define MIN_RENTCOST 5000

//----------------------------
//----------------------------
#define c_y 0xFFFF00AA
#define c_r 0xAA3333AA

#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1


new HousePickup[MAX_HOUSES];
new playerinterior[MAX_PLAYERS]=-1;
new Float:housex[MAX_PLAYERS], Float:housey[MAX_PLAYERS], Float:housez[MAX_PLAYERS];
new housemapicon[MAX_PLAYERS];
new playerworld[MAX_PLAYERS];

new Text:text34;
new Text:HOUSEBOX;
new Text:HSTATSBOX;
new Text:text28;
new Text:text29;
new Text:text30;
new Text:text31;
new Text:text32;
new Text:text33;
forward rentfee();

enum HouseInfo
{
	Name[24],
	Renter[24],
	Rentable,
	Rentcost,
	Cost,
	Sell,
	Interior,
	Virtualworld,
	Locked,
	Float:InteriorX,
	Float:InteriorY,
	Float:InteriorZ,
	Float:iconx,
	Float:icony,
	Float:iconz,
	Rentfee
}
new hInfo[MAX_HOUSES][HouseInfo];

public OnGameModeExit()
{
	for(new i=0;i<MAX_HOUSES;i++)
	{
	    DestroyPickup(HousePickup[i]);
	}
}

public OnGameModeInit()
{

    HOUSEBOX = TextDrawCreate(5.000000, 120.000000, "~n~~n~~n~");
    TextDrawUseBox(HOUSEBOX, 1);
    TextDrawBoxColor(HOUSEBOX, 0x000000cc);
    TextDrawTextSize(HOUSEBOX, 170.000000, 250.000000);
    TextDrawAlignment(HOUSEBOX, 0);
	TextDrawBackgroundColor(HOUSEBOX, 0x000000ff);
	TextDrawFont(HOUSEBOX, 3);
	TextDrawLetterSize(HOUSEBOX, 1.700000, 5.699999);
	TextDrawColor(HOUSEBOX, 0x000000ff);
	TextDrawSetOutline(HOUSEBOX, 1);
	TextDrawSetShadow(HOUSEBOX, 1);
	TextDrawSetProportional(HOUSEBOX, 1);
	
	
	HSTATSBOX = TextDrawCreate(5.000000, 120.000000, "~n~~n~");
    TextDrawUseBox(HSTATSBOX, 1);
	TextDrawBoxColor(HSTATSBOX, 0x000000cc);
	TextDrawTextSize(HSTATSBOX, 180.000000, 250.000000);
	TextDrawAlignment(HSTATSBOX, 0);
	TextDrawBackgroundColor(HSTATSBOX, 0x000000ff);
	TextDrawFont(HSTATSBOX, 3);
	TextDrawLetterSize(HSTATSBOX, 1.700000, 5.699999);
	TextDrawColor(HSTATSBOX, 0x000000ff);
	TextDrawSetOutline(HSTATSBOX, 1);
	TextDrawSetShadow(HSTATSBOX, 1);
	TextDrawSetProportional(HSTATSBOX, 1);
	
	
	text28 = TextDrawCreate(7.000000, 123.000000, "House Options:");
    TextDrawAlignment(text28, 0);
    TextDrawBackgroundColor(text28, 0xF6F600AA);
    TextDrawFont(text28, 1);
    TextDrawLetterSize(text28, 0.499999, 1.200000);
    TextDrawColor(text28, 0x0000ffff);
    TextDrawSetOutline(text28, 1);
    TextDrawSetProportional(text28, 1);
    TextDrawSetShadow(text28, 1);
    
    
    text34 = TextDrawCreate(7.000000, 123.000000, "House Stats:");
    TextDrawAlignment(text34, 0);
    TextDrawBackgroundColor(text34, 0xF6F600AA);
    TextDrawFont(text34, 1);
    TextDrawLetterSize(text34, 0.499999, 1.200000);
    TextDrawColor(text34, 0x0000ffff);
    TextDrawSetOutline(text34, 1);
    TextDrawSetProportional(text34, 1);
    TextDrawSetShadow(text34, 1);
    
    text29 = TextDrawCreate(7.000000, 136.000000, "~n~~y~/setrent [0/1] [Cost]~n~~y~/getrent~n~~y~/lock~n~~y~/unlock~n~~y~/payrent~n~~y~/unrent~n~~y~/rent~n~~y~~n~~y~/visithouse~n~~y~/househelp~n~~n~~w~Use ~r~LMB ~w~to Hide thes boxes");
    TextDrawAlignment(text29, 0);
    TextDrawLetterSize(text29, 0.299999, 0.900000);
    TextDrawColor(text29, 0xffff00ff);
    TextDrawSetOutline(text29, 1);
    TextDrawSetProportional(text29, 1);
    TextDrawSetShadow(text29, 1);
    
    text32 = TextDrawCreate(7.000000, 136.000000, "~n~~n~~n~");
    TextDrawAlignment(text32, 0);
    TextDrawLetterSize(text32, 0.299999, 0.900000);
    TextDrawColor(text32, 0xffff00ff);
    TextDrawSetOutline(text32, 1);
    TextDrawSetProportional(text32, 1);
    TextDrawSetShadow(text32, 1);
    
    text30 = TextDrawCreate(7.000000, 136.000000, "~n~");
    TextDrawAlignment(text30, 0);
    TextDrawLetterSize(text30, 0.299999, 0.900000);
    TextDrawColor(text30, 0xffff00ff);
    TextDrawSetOutline(text30, 1);
    TextDrawSetProportional(text30, 1);
    TextDrawSetShadow(text30, 1);
    
    text33 = TextDrawCreate(7.000000, 136.000000, "~n~~n~~n~~n~");
    TextDrawAlignment(text33, 0);
    TextDrawLetterSize(text33, 0.299999, 0.900000);
    TextDrawColor(text33, 0xffff00ff);
    TextDrawSetOutline(text33, 1);
    TextDrawSetProportional(text33, 1);
    TextDrawSetShadow(text33, 1);

    text31 = TextDrawCreate(7.000000, 136.000000, "~n~~n~");
    TextDrawAlignment(text31, 0);
    TextDrawLetterSize(text31, 0.299999, 0.900000);
    TextDrawColor(text31, 0xffff00ff);
    TextDrawSetOutline(text31, 1);
    TextDrawSetProportional(text31, 1);
    TextDrawSetShadow(text31, 1);
    
    //Houses
	AH(1, -2792.0032,218.5457,7.8594, 235.508994,1189.169897,1080.339966, 843267, 0, 3);
	AH(2, -2791.8650,212.2090,10.0547, 225.756989,1240.000000,1082.149902, 535712, 0, 2);
	AH(3, -2791.6953,200.5145,7.8594, 235.508994,1189.169897,1080.339966, 9543731, 0, 3);
	AH(4, -2791.8618,194.5492,10.0547, 235.508994,1189.169897,1080.339966, 632156, 0, 3);
	AH(5, -2789.3069,183.7875,10.0625, 225.756989,1240.000000,1082.149902, 534321, 0, 2);
	AH(6, -2792.0286,142.8144,10.0547, 225.630997,1022.479980,1084.069946, 541682, 0, 7);
	AH(7, -2792.1262,130.5643,7.8594, 235.508994,1189.169897,1080.339966, 359812, 0, 3);
	AH(8, -2791.1965,126.9398,7.2020, 225.630997,1022.479980,1084.069946, 543278, 0, 7);
	AH(9, -2794.2617,110.9694,7.1875, 235.508994,1189.169897,1080.339966, 7764567, 0, 3);
	AH(10, -2791.7937,104.2355,10.0547, 235.508994,1189.169897,1080.339966, 791263, 0, 3);
	AH(11, -2791.7727,92.0455,7.8594, 225.630997,1022.479980,1084.069946, 563791, 0, 7);
	AH(12, -2793.5129,85.1084,7.1875, 235.508994,1189.169897,1080.339966, 7166378, 0, 3);
	AH(13, -2792.1282,77.1071,10.0547, 235.508994,1189.169897,1080.339966, 677439, 0, 3);
	AH(14, -2791.3762,69.8372,7.2020, 225.630997,1022.479980,1084.069946, 5892243, 0, 7);
	AH(15, -2794.1086,21.3407,7.1875, 235.508994,1189.169897,1080.339966, 987668, 0, 3);
	AH(16, -2794.3918,11.1224,7.1875, 225.756989,1240.000000,1082.149902, 535841, 0, 2);
	AH(17, -2791.5022,7.2104,7.1953, 235.508994,1189.169897,1080.339966, 984938, 0, 3);
	AH(18, -2791.9407,-17.7570,7.8594, 225.630997,1022.479980,1084.069946, 593849, 0, 7);
	AH(19, -2791.8381,-24.0922,10.0547, 235.508994,1189.169897,1080.339966, 784543, 0, 3);
	AH(20, -2792.1204,-35.7894,7.8594, 235.508994,1189.169897,1080.339966, 884759, 0, 3);
	AH(21, -2791.8569,-42.5790,10.0547, 225.630997,1022.479980,1084.069946, 523512, 0, 7);
	AH(22, -2789.2371,-52.6049,10.0625, 235.508994,1189.169897,1080.339966, 712435, 0, 3);
	AH(23, -2791.0247,-82.6386,7.1953, 235.508994,1189.169897,1080.339966, 893748, 0, 3);
	AH(24, -2792.0605,-95.0689,10.0547, 235.508994,1189.169897,1080.339966, 6930249, 0, 3);
	AH(25, -2791.6174,-107.5324,7.8594, 225.630997,1022.479980,1084.069946, 59283465, 0, 7);
	AH(26, -2790.6335,-111.1270,7.2020, 225.756989,1240.000000,1082.149902, 5867548, 0, 2);
	AH(27, -2793.7009,-127.0277,7.1875, 235.508994,1189.169897,1080.339966, 18758962, 0, 3);
	AH(28, -2791.7622,-133.8479,10.0547, 235.508994,1189.169897,1080.339966, 7875796, 0, 3);
	AH(29, -2791.7236,-146.0063,7.8594, 235.508994,1189.169897,1080.339966, 7849021, 0, 3);
	AH(30, -2793.9507,-153.0801,7.1875, 235.508994,1189.169897,1080.339966, 35496785, 0, 3);
	AH(31, -2791.8777,-160.7592,10.0547, 235.508994,1189.169897,1080.339966, 5432023, 0, 3);
	AH(32, -2790.9998,-168.4613,7.2020, 235.508994,1189.169897,1080.339966, 543944, 0, 3);
	AH(33, -2724.4038,-191.3458,4.3359, 235.508994,1189.169897,1080.339966, 6540667, 0, 3);
	AH(34, -2723.0474,-179.0697,7.2031, 235.508994,1189.169897,1080.339966, 8594307, 0, 3);
	AH(35, -2723.0383,-166.3192,5.0000, 235.508994,1189.169897,1080.339966, 49847608, 0, 3);
	AH(36, -2723.3674,-162.7499,4.3426, 225.630997,1022.479980,1084.069946, 590678, 0, 7);
	AH(37, -2721.0869,-146.6538,4.3359, 235.508994,1189.169897,1080.339966, 8457659, 0, 3);
	AH(38, -2723.2329,-139.9674,7.2031, 235.508994,1189.169897,1080.339966, 4981546, 0, 3);
	AH(39, -2722.4277,-127.9628,4.9989, 225.756989,1240.000000,1082.149902, 565485, 0, 2);
	AH(40, -2720.9177,-120.6594,4.3359, 235.508994,1189.169897,1080.339966, 25698383, 0, 3);
	AH(41, -2723.1047,-113.0636,7.2031, 235.508994,1189.169897,1080.339966, 7987657, 0, 3);
	AH(42, -2723.8784,-105.6934,4.3426, 225.630997,1022.479980,1084.069946, 5958541, 0, 7);
	AH(43, -2725.4216,-92.6701,7.2031, 235.508994,1189.169897,1080.339966, 4958439, 0, 3);
	AH(44, -2724.1079,-58.1508,4.3426, 235.508994,1189.169897,1080.339966, 6766559, 0, 3);
	AH(45, -2720.3140,-44.6839,4.3359, 223.043991,1289.259888,1082.199951, 5988970, 0, 1);
	AH(46, -2725.7761,-36.4325,7.1953, 235.508994,1189.169897,1080.339966, 3099053, 0, 3);
	AH(47, -2720.7800,-23.3610,4.3359, 235.508994,1189.169897,1080.339966, 6345635, 0, 3);
	AH(48, -2723.0308,-16.3896,7.2031, 235.508994,1189.169897,1080.339966, 743511, 0, 3);
	AH(49, -2723.2869,3.7398,7.2031, 235.508994,1189.169897,1080.339966, 7557636, 0, 3);
	AH(50, -2720.8911,14.6176,4.3359, 225.630997,1022.479980,1084.069946, 3345525, 0, 7);
	AH(51, -2723.1941,22.5038,7.2031, 235.508994,1189.169897,1080.339966, 8556322, 0, 3);
	AH(52, -2687.3857,-188.0534,7.2031, 235.508994,1189.169897,1080.339966, 33344478, 0, 3);
	AH(53, -2689.2871,-175.0807,4.3426, 225.756989,1240.000000,1082.149902, 5786866, 0, 2);
	AH(54, -2689.4290,-167.6253,7.2031, 235.508994,1189.169897,1080.339966, 6547657, 0, 3);
	AH(55, -2691.9841,-159.7905,4.3359, 235.508994,1189.169897,1080.339966, 7675497, 0, 3);
	AH(56, -2689.8789,-152.8704,5.0000, 235.508994,1189.169897,1080.339966, 7334578, 0, 3);
	AH(57, -2689.5601,-140.9326,7.2031, 235.508994,1189.169897,1080.339966, 8432423, 0, 3);
	AH(58, -2691.1880,-133.8540,4.3359, 235.508994,1189.169897,1080.339966, 9233432, 0, 3);
	AH(59, -2689.0764,-118.0584,4.3426, 235.508994,1189.169897,1080.339966, 5765342, 0, 3);
	AH(60, -2689.4207,-114.3359,5.0000, 225.630997,1022.479980,1084.069946, 5546787, 0, 7);
	AH(61, -2689.4163,-101.7950,7.2031, 235.508994,1189.169897,1080.339966, 6324234, 0, 3);
	AH(62, -2689.1272,-89.4810,4.3359, 235.508994,1189.169897,1080.339966, 7654456, 0, 3);
	AH(63, -2689.5083,56.4591,7.2031, 235.508994,1189.169897,1080.339966, 6346548, 0, 3);
	AH(64, -2691.5542,64.5130,4.3359, 235.508994,1189.169897,1080.339966, 8645644, 0, 3);
	AH(65, -2689.4841,74.9961,7.2031, 235.508994,1189.169897,1080.339966, 4234544, 0, 3);
	AH(66, -2689.3416,96.0183,7.2031, 235.508994,1189.169897,1080.339966, 6478766, 0, 3);
	AH(67, -2690.7781,102.2467,4.5707, 225.756989,1240.000000,1082.149902, 9534543, 0, 2);
	AH(68, -2687.2952,115.5345,7.1953, 235.508994,1189.169897,1080.339966, 4654335, 0, 3);
	AH(69, -2691.1672,123.6536,4.3359, 225.630997,1022.479980,1084.069946, 4353455, 0, 7);
	AH(70, -2692.9421,189.2523,7.2031, 235.508994,1189.169897,1080.339966, 6546546, 0, 3);
	AH(71, -2682.9924,192.8043,7.1953, 235.508994,1189.169897,1080.339966, 4939948, 0, 3);
	AH(72, -2672.1079,189.6065,4.3281, 225.630997,1022.479980,1084.069946, 6554336, 0, 7);
	AH(73, -2662.9214,188.5581,4.3281, 235.508994,1189.169897,1080.339966, 6645652, 0, 3);
	AH(74, -2654.0259,190.3699,4.3281, 235.508994,1189.169897,1080.339966, 6243423, 0, 3);
	AH(75, -2639.6589,168.7447,7.1953, 235.508994,1189.169897,1080.339966, 6432975, 0, 3);
	AH(76, -2627.9788,168.5144,5.0000, 225.756989,1240.000000,1082.149902, 5222355, 0, 2);
	AH(77, -2621.5745,168.7183,7.1953, 235.508994,1189.169897,1080.339966, 6543335, 0, 3);
	AH(78, -2622.7883,131.5914,7.1674, 223.043991,1289.259888,1082.199951, 5787534, 0, 1);
	AH(79, -2620.9529,121.1407,7.2031, 235.508994,1189.169897,1080.339966, 9765456, 0, 3);
	AH(80, -2620.5200,114.9094,5.0000, 235.508994,1189.169897,1080.339966, 1665334, 0, 3);
	AH(81, -2620.7693,103.0333,7.2031, 235.508994,1189.169897,1080.339966, 1054322, 0, 3);
	AH(82, -2620.5029,96.8228,5.0000, 235.508994,1189.169897,1080.339966, 1011143, 0, 3);
	AH(83, -2625.2922,78.7943,7.2031, 225.630997,1022.479980,1084.069946, 5334223, 0, 7);
	AH(84, -2621.8040,71.5860,4.3359, 235.508994,1189.169897,1080.339966, 2332456, 0, 3);
	AH(85, -2619.3682,67.9175,4.4968, 235.508994,1189.169897,1080.339966, 5654324, 0, 3);
	AH(86, -2618.5710,57.6395,4.3359, 235.508994,1189.169897,1080.339966, 5543222, 0, 3);
	AH(87, -2621.6201,-198.1479,4.3359, 235.508994,1189.169897,1080.339966, 9234326, 0, 3);
	AH(88, -2620.7522,-185.7211,7.2031, 235.508994,1189.169897,1080.339966, 1142344, 0, 3);
	AH(89, -2620.2297,-173.2316,5.0000, 225.630997,1022.479980,1084.069946, 5423228, 0, 7);
	AH(90, -2621.0557,-169.5474,4.3426, 235.508994,1189.169897,1080.339966, 1287546, 0, 3);
	AH(91, -2619.2837,-153.4561,4.3359, 235.508994,1189.169897,1080.339966, 9876555, 0, 3);
	AH(92, -2620.7551,-146.5125,7.2031, 235.508994,1189.169897,1080.339966, 2365464, 0, 3);
	AH(93, -2620.8889,-134.6754,5.0000, 225.756989,1240.000000,1082.149902, 5535433, 0, 2);
	AH(94, -2618.5010,-127.3707,4.3359, 235.508994,1189.169897,1080.339966, 1222221, 0, 3);
	AH(95, -2620.7146,-119.5122,7.2031, 235.508994,1189.169897,1080.339966, 1054352, 0, 3);
	AH(96, -2622.2913,-112.4533,4.3426, 235.508994,1189.169897,1080.339966, 8354534, 0, 3);
	AH(97, -2623.4319,-99.7025,7.2031, 225.630997,1022.479980,1084.069946, 5555555, 0, 7);
	AH(98, -2477.2085,1338.1647,8.5039, 235.508994,1189.169897,1080.339966, 7542234, 0, 3);
	AH(99, -2477.1899,1318.4774,13.8516, 235.508994,1189.169897,1080.339966, 7432224, 0, 3);
	AH(100, -2476.8918,1310.9004,15.4256, 235.508994,1189.169897,1080.339966, 6664227, 0, 3);
	AH(101, -2477.6953,1301.2537,18.3750, 235.508994,1189.169897,1080.339966, 6534532, 0, 3);
	AH(102, -2476.8040,1281.5071,23.7266, 235.508994,1189.169897,1080.339966, 5423434, 0, 3);
	AH(103, -2476.5608,1274.3176,25.4578, 235.508994,1189.169897,1080.339966, 2432436, 0, 3);
	AH(104, -2477.6460,1264.1865,28.2500, 235.508994,1189.169897,1080.339966, 4534578, 0, 3);
	AH(105, -2476.5964,1244.6128,33.6094, 225.756989,1240.000000,1082.149902, 5654656, 0, 2);
	AH(106, -2433.7104,1244.5210,33.6172, 223.043991,1289.259888,1082.199951, 4656545, 0, 1);
	AH(107, -2433.2988,1264.4119,28.2578, 235.508994,1189.169897,1080.339966, 6454548, 0, 3);
	AH(108, -2434.5513,1274.0374,25.5235, 225.756989,1240.000000,1082.149902, 5456454, 0, 2);
	AH(109, -2433.8960,1281.4535,23.7422, 235.508994,1189.169897,1080.339966, 4564544, 0, 3);
	AH(110, -2433.4487,1301.0851,18.3828, 235.508994,1189.169897,1080.339966, 7622476, 0, 3);
	AH(111, -2434.3870,1311.1744,15.5327, 225.630997,1022.479980,1084.069946, 5566544, 0, 7);
	AH(112, -2433.9937,1318.4637,13.8672, 235.508994,1189.169897,1080.339966, 8234342, 0, 3);
	AH(113, -2433.5125,1338.0422,8.5078, 235.508994,1189.169897,1080.339966, 3654432, 0, 3);
	AH(114, -2358.9541,1117.8035,55.7266, 235.508994,1189.169897,1080.339966, 8543533, 0, 3);
	AH(115, -2369.6641,1122.1299,55.7333, 235.508994,1189.169897,1080.339966, 8654545, 0, 3);
	AH(116, -2383.9539,1127.9805,55.7266, 235.508994,1189.169897,1080.339966, 6546454, 0, 3);
	AH(117, -2396.7722,1132.5397,55.7333, 225.630997,1022.479980,1084.069946, 5232234, 0, 7);
	AH(118, -2406.9609,1135.4182,55.7266, 235.508994,1189.169897,1080.339966, 7546223, 0, 3);
	AH(119, -2413.5281,1137.0345,55.7266, 225.756989,1240.000000,1082.149902, 5654636, 0, 2);
	AH(120, -2424.0266,1138.9363,55.7266, 235.508994,1189.169897,1080.339966, 6654622, 0, 3);
	AH(121, -2438.1973,1140.3687,55.7266, 235.508994,1189.169897,1080.339966, 2222346, 0, 3);
	AH(122, -2451.2041,1141.3823,55.7333, 225.630997,1022.479980,1084.069946, 5767763, 0, 7);
	AH(123, -2461.7610,1141.6252,55.7266, 235.508994,1189.169897,1080.339966, 1654555, 0, 3);
	AH(124, -2468.2593,1141.3794,55.7333, 235.508994,1189.169897,1080.339966, 1776543, 0, 3);
	AH(125, -2478.8972,1141.4277,55.7266, 235.508994,1189.169897,1080.339966, 1222552, 0, 3);
	AH(126, -2493.2288,1141.4800,55.7266, 225.630997,1022.479980,1084.069946, 5534533, 0, 7);
	AH(127, -2506.3359,1141.7378,55.7266, 235.508994,1189.169897,1080.339966, 8345345, 0, 3);
	AH(128, -2517.2068,1142.1835,55.7266, 235.508994,1189.169897,1080.339966, 9354354, 0, 3);
	AH(129, -2523.9561,1142.4517,55.7266, 225.630997,1022.479980,1084.069946, 5984435, 0, 7);
	AH(130, -2534.4790,1143.0933,55.7266, 235.508994,1189.169897,1080.339966, 1354355, 0, 3);
	AH(131, -2549.3252,1145.4052,55.7266, 225.756989,1240.000000,1082.149902, 5435345, 0, 2);
	AH(132, -2563.3992,1148.5491,55.7266, 235.508994,1189.169897,1080.339966, 1354354, 0, 3);
	AH(133, -2574.4150,1151.1338,55.7266, 235.508994,1189.169897,1080.339966, 8222125, 0, 3);
	AH(134, -2510.9272,1053.9352,65.1837, 225.630997,1022.479980,1084.069946, 5433555, 0, 7);
	AH(135, -2511.7151,1045.4478,65.5078, 235.508994,1189.169897,1080.339966, 4354351, 0, 3);
	AH(136, -2512.2976,1029.0618,73.7493, 235.508994,1189.169897,1080.339966, 2537753, 0, 3);
	AH(137, -2511.9719,1021.1053,77.1556, 225.756989,1240.000000,1082.149902, 5645642, 0, 2);
	AH(138, -2512.8677,1008.8986,78.3438, 235.508994,1189.169897,1080.339966, 3456663, 0, 3);
	AH(139, -2512.6470,1000.7858,78.3438, 235.508994,1189.169897,1080.339966, 5345436, 0, 3);
	AH(140, -2512.3064,992.3969,78.3286, 235.508994,1189.169897,1080.339966, 9578836, 0, 3);
	AH(141, -2512.7424,987.8932,78.3438, 235.508994,1189.169897,1080.339966, 1756655, 0, 3);
	AH(142, -2512.6753,975.7534,77.0082, 235.508994,1189.169897,1080.339966, 1567756, 0, 3);
	AH(143, -2512.1846,967.4744,73.5570, 235.508994,1189.169897,1080.339966, 5677658, 0, 3);
	AH(144, -2512.4719,951.3694,66.0295, 225.630997,1022.479980,1084.069946, 5675675, 0, 7);
	AH(145, -2511.7100,942.9174,65.2891, 235.508994,1189.169897,1080.339966, 8776334, 0, 3);
	AH(146, -2536.8147,929.3670,65.0331, 223.043991,1289.259888,1082.199951, 5654643, 0, 1);
	AH(147, -2542.2612,942.7044,64.0000, 235.508994,1189.169897,1080.339966, 5464535, 0, 3);
	AH(148, -2542.4644,951.2361,65.5053, 235.508994,1189.169897,1080.339966, 8654646, 0, 3);
	AH(149, -2542.1077,967.6249,73.5443, 235.508994,1189.169897,1080.339966, 9654645, 0, 3);
	AH(150, -2541.3147,975.5494,77.1964, 235.508994,1189.169897,1080.339966, 5435342, 0, 3);
	AH(151, -2541.0005,987.9982,78.2891, 225.756989,1240.000000,1082.149902, 5543534, 0, 2);
	AH(152, -2553.5286,993.0783,78.2741, 235.508994,1189.169897,1080.339966, 7345435, 0, 3);
	AH(153, -2564.2317,992.9250,78.2734, 235.508994,1189.169897,1080.339966, 4345435, 0, 3);
	AH(154, -2573.4978,993.3554,78.2734, 235.508994,1189.169897,1080.339966, 3345345, 0, 3);
	AH(155, -2584.0557,993.1696,78.2734, 235.508994,1189.169897,1080.339966, 7535435, 0, 3);
	AH(156, -2597.5029,986.2858,78.2734, 225.630997,1022.479980,1084.069946, 5354435, 0, 7);
	AH(157, -2597.6775,979.7177,78.2734, 235.508994,1189.169897,1080.339966, 8432344, 0, 3);
	AH(158, -2598.3833,969.3156,78.2833, 223.043991,1289.259888,1082.199951, 5423432, 0, 1);
	AH(159, -2591.9163,960.7586,78.4425, 235.508994,1189.169897,1080.339966, 7432432, 0, 3);
	AH(160, -2591.5103,944.5360,70.4297, 235.508994,1189.169897,1080.339966, 4234321, 0, 3);
	AH(161, -2591.2805,935.9376,68.9297, 235.508994,1189.169897,1080.339966, 3242443, 0, 3);
	AH(162, -2591.5774,927.9774,65.0156, 235.508994,1189.169897,1080.339966, 6423422, 0, 3);
	AH(163, 1442.9769,-629.5287,95.7186, 2317.8201,-1024.7500,1050.2109, 6556338, 0, 9);
	AH(164, 1980.9896,-1719.0171,17.0304, 235.508994,1189.169897,1080.339966, 6546654, 0, 3);
	AH(165, 1981.4432,-1682.8618,17.0538, 235.508994,1189.169897,1080.339966, 1265464, 0, 3);
	AH(166, 1975.0110,-1634.1149,18.5690, 225.630997,1022.479980,1084.069946, 5645664, 0, 7);
	AH(167, 1987.9093,-1606.3440,13.5260, 235.508994,1189.169897,1080.339966, 1245645, 0, 3);
	AH(168, 2003.7064,-1595.2969,13.5756, 235.508994,1189.169897,1080.339966, 1254352, 0, 3);
	AH(169, 2012.2252,-1595.3807,13.5795, 235.508994,1189.169897,1080.339966, 1211123, 0, 3);
	AH(170, 2015.9701,-1629.9229,13.5469, 235.508994,1189.169897,1080.339966, 1290092, 0, 3);
	AH(171, 2014.6212,-1641.7108,13.7824, 225.756989,1240.000000,1082.149902, 5000000, 0, 2);
	AH(172, 2012.6661,-1656.4851,13.5547, 235.508994,1189.169897,1080.339966, 1398431, 0, 3);
	AH(172, 2017.5685,-1703.2413,14.2344, 235.508994,1189.169897,1080.339966, 9999999, 0, 3);
	AH(173, 2015.1305,-1717.0602,13.5547, 235.508994,1189.169897,1080.339966, 9000000, 0, 3);
	AH(174, 2014.8356,-1732.5490,14.2344, 235.508994,1189.169897,1080.339966, 5353217, 0, 3);
	AH(175, 2067.8062,-1731.5685,13.8762, 225.630997,1022.479980,1084.069946, 5534532, 0, 7);
	AH(176, 2066.9041,-1717.0404,13.8058, 235.508994,1189.169897,1080.339966, 2543553, 0, 3);
	AH(177, 2066.4514,-1703.4309,14.1484, 235.508994,1189.169897,1080.339966, 5411321, 0, 3);
	AH(178, 2067.2993,-1656.5607,13.8694, 235.508994,1189.169897,1080.339966, 9432422, 0, 3);
	AH(179, 2068.1575,-1643.6171,13.8058, 235.508994,1189.169897,1080.339966, 2432214, 0, 3);
	AH(180, 2068.5093,-1628.8052,13.8762, 235.508994,1189.169897,1080.339966, 9800763, 0, 3);
	AH(181, 2244.1453,-1638.3672,15.9074, 235.508994,1189.169897,1080.339966, 125433, 0, 3);
	AH(182, 2257.0513,-1645.4154,15.5103, 235.508994,1189.169897,1080.339966, 1454355, 0, 3);
	AH(183, 2282.1987,-1642.0103,15.6279, 235.508994,1189.169897,1080.339966, 215555, 0, 3);
	AH(184, 2306.9558,-1678.6335,14.0012, 235.508994,1189.169897,1080.339966, 2223450, 0, 3);
	AH(185, 2328.0569,-1681.9448,14.8906, 225.630997,1022.479980,1084.069946, 5542124, 0, 7);
	AH(186, 2326.7925,-1717.2958,13.9074, 235.508994,1189.169897,1080.339966, 5435432, 0, 3);
	AH(187, 2308.7632,-1715.4675,14.6496, 235.508994,1189.169897,1080.339966, 9897099, 0, 3);
	AH(188, 2362.9036,-1644.5320,13.5338, 235.508994,1189.169897,1080.339966, 6008576, 0, 3);
	AH(189, 2368.2544,-1674.6079,13.9063, 235.508994,1189.169897,1080.339966, 9346543, 0, 3);
	AH(190, 2384.5344,-1675.5581,14.9152, 235.508994,1189.169897,1080.339966, 7765765, 0, 3);
	AH(191, 2393.2825,-1646.7831,13.6432, 235.508994,1189.169897,1080.339966, 6756579, 0, 3);
	AH(192, 2408.8901,-1674.1279,13.6048, 225.630997,1022.479980,1084.069946, 5756755, 0, 7);
	AH(193, 2452.0610,-1642.4387,13.7357, 235.508994,1189.169897,1080.339966, 7875557, 0, 3);
	AH(195, 2469.3904,-1647.1652,13.5182, 225.756989,1240.000000,1082.149902, 5576577, 0, 2);
	AH(196, 2486.4082,-1645.6971,14.0772, 235.508994,1189.169897,1080.339966, 5563224, 0, 3);
	AH(197, 2498.5413,-1643.3199,13.7826, 223.043991,1289.259888,1082.199951, 5423423, 0, 1);
	AH(199, 2524.1426,-1658.7670,15.4935, 225.630997,1022.479980,1084.069946, 5423432, 0, 7);
	AH(201, 2514.0037,-1691.2399,14.0460, 235.508994,1189.169897,1080.339966, 4543325, 0, 3);
	AH(202, 1421.9220,-885.3376,50.6537, 235.508994,1189.169897,1080.339966, 8834257, 0, 3);
	AH(203, 1468.5801,-905.0406,54.8359, 225.756989,1240.000000,1082.149902, 5456454, 0, 2);
	AH(204, 1539.3394,-851.3119,64.3361, 235.508994,1189.169897,1080.339966, 7223553, 0, 3);
	AH(205, 1534.7238,-800.2780,72.8495, 235.508994,1189.169897,1080.339966, 3435224, 0, 3);
	AH(206, 1527.7050,-772.8008,80.5781, 235.508994,1189.169897,1080.339966, 1543364, 0, 3);
	AH(207, 1497.0565,-689.4225,94.9837, 235.508994,1189.169897,1080.339966, 8876663, 0, 3);
	AH(208, 1298.9934,-801.3060,84.1406, 1267.663208,-781.323242,1091.906250, 2009993, 0, 5);
	AH(209, 1111.1852,-741.8688,100.1329, 235.508994,1189.169897,1080.339966, 8534355, 0, 3);
	AH(210, 1095.0391,-646.2599,113.6393, 235.508994,1189.169897,1080.339966, 5533435, 0, 3);
	AH(211, 1045.1826,-641.5063,120.1172, 235.508994,1189.169897,1080.339966, 3891122, 0, 3);
	AH(212, 980.1791,-676.8241,121.9763, 235.508994,1189.169897,1080.339966, 2223338, 0, 3);
	AH(213, 945.9159,-710.0625,122.6199, 235.508994,1189.169897,1080.339966, 4543533, 0, 3);
	AH(214, 898.8669,-677.7330,116.8904, 235.508994,1189.169897,1080.339966, 2322554, 0, 3);
	AH(215, 868.5256,-716.0165,105.6797, 235.508994,1189.169897,1080.339966, 6654422, 0, 3);
	AH(216, 891.1033,-782.4664,101.3076, 235.508994,1189.169897,1080.339966, 5654442, 0, 3);
	AH(217, 840.9026,-754.9353,85.3125, 235.508994,1189.169897,1080.339966, 8592831, 0, 3);
	AH(218, 810.1652,-759.2835,76.5314, 223.043991,1289.259888,1082.199951, 5542234, 0, 1);
	AH(219, 785.4646,-827.9399,70.2896, 235.508994,1189.169897,1080.339966, 8543555, 0, 3);
	AH(220, 1019.7907,-775.8934,102.9798, 235.508994,1189.169897,1080.339966, 2325483, 0, 3);
	AH(221, 1033.8536,-810.8344,101.8516, 235.508994,1189.169897,1080.339966, 8245664, 0, 3);
	AH(222, 977.6115,-771.1645,112.2026, 235.508994,1189.169897,1080.339966, 2344255, 0, 3);
	AH(223, 989.8781,-828.6146,95.4686, 225.756989,1240.000000,1082.149902, 5554446, 0, 2);
	AH(224, 937.3938,-847.8276,93.7208, 235.508994,1189.169897,1080.339966, 1854334, 0, 3);
	AH(225, 910.9013,-830.4510,92.0314, 235.508994,1189.169897,1080.339966, 1543532, 0, 3);
	AH(226, 863.3464,-844.6940,77.3750, 225.630997,1022.479980,1084.069946, 5534555, 0, 7);
	AH(227, 873.7527,-875.0513,77.6468, 235.508994,1189.169897,1080.339966, 4535322, 0, 3);
	AH(228, 828.0614,-858.6249,70.3308, 235.508994,1189.169897,1080.339966, 5534534, 0, 3);
	AH(229, 836.6172,-894.2524,68.7689, 235.508994,1189.169897,1080.339966, 4543534, 0, 3);
	AH(230, 831.7010,-924.4267,55.2500, 235.508994,1189.169897,1080.339966, 7511234, 0, 3);
	AH(231, 927.0675,-918.9965,42.6016, 235.508994,1189.169897,1080.339966, 6547873, 0, 3);
	AH(232, 790.4625,-839.7156,60.6328, 235.508994,1189.169897,1080.339966, 6351235, 0, 3);
	AH(233, 725.2636,-998.1957,52.7344, 235.508994,1189.169897,1080.339966, 6768943, 0, 3);
	AH(234, 671.7036,-1019.5114,55.7596, 235.508994,1189.169897,1080.339966, 6768866, 0, 3);
	AH(235, 699.2920,-1059.5581,49.4217, 235.508994,1189.169897,1080.339966, 1076575, 0, 3);
	AH(236, 658.2350,-1064.6971,48.8591, 235.508994,1189.169897,1080.339966, 4645644, 0, 3);
	AH(237, 611.5078,-1085.0913,58.8267, 235.508994,1189.169897,1080.339966, 7465445, 0, 3);
	AH(238, 573.1848,-1127.9066,50.6797, 223.043991,1289.259888,1082.199951, 5546546, 0, 1);
	AH(239, 558.5552,-1160.8606,54.4223, 235.508994,1189.169897,1080.339966, 5452221, 0, 3);
	AH(240, 471.2500,-1165.1323,67.1103, 235.508994,1189.169897,1080.339966, 5435333, 0, 3);
	AH(241, 416.3077,-1154.4326,76.6876, 235.508994,1189.169897,1080.339966, 5677436, 0, 3);
	AH(242, 497.4302,-1094.0137,82.3592, 235.508994,1189.169897,1080.339966, 5345112, 0, 3);
	AH(243, 559.1510,-1075.6975,72.9220, 225.756989,1240.000000,1082.149902, 5349879, 0, 2);
	AH(244, 351.2215,-1196.4974,76.5156, 235.508994,1189.169897,1080.339966, 5546452, 0, 3);
	AH(245, 297.5733,-1154.6417,80.9099, 225.630997,1022.479980,1084.069946, 5654773, 0, 7);
	AH(246, 252.0526,-1221.5267,75.5647, 235.508994,1189.169897,1080.339966, 5654445, 0, 3);
	AH(247, 253.1690,-1269.2717,74.1546, 235.508994,1189.169897,1080.339966, 5223114, 0, 3);
	AH(248, 220.1229,-1251.3457,78.3250, 225.756989,1240.000000,1082.149902, 5543674, 0, 2);
	AH(249, 167.1404,-1308.4950,70.3513, 2567.52,-1294.59,1063.25, 4002226, 0, 2);
	AH(250, 255.6111,-1366.4392,53.1094, 235.508994,1189.169897,1080.339966, 9998865, 0, 3);
	AH(251, 298.1030,-1337.2783,53.4416, 235.508994,1189.169897,1080.339966, 5900093, 0, 3);
	AH(252, 354.5517,-1280.1058,53.7036, 235.508994,1189.169897,1080.339966, 5232341, 0, 3);
	AH(253, 398.3043,-1271.3098,50.0198, 235.508994,1189.169897,1080.339966, 5435768, 0, 3);
	AH(254, 552.8212,-1200.2380,44.8315, 225.756989,1240.000000,1082.149902, 5534533, 0, 2);
	AH(255, 228.8196,-1403.8463,51.6080, 235.508994,1189.169897,1080.339966, 2223345, 0, 3);
	AH(256, 143.6392,-1468.8623,25.2036, 225.630997,1022.479980,1084.069946, 5444123, 0, 7);
	AH(257, 2449.4973,742.7098,11.4609, 235.508994,1189.169897,1080.339966, 5556668, 0, 3);
	AH(258, 2449.2815,714.4805,11.4683, 235.508994,1189.169897,1080.339966, 5125645, 0, 3);
	AH(259, 2447.0505,691.1176,11.4609, 235.508994,1189.169897,1080.339966, 5749381, 0, 3);
	AH(260, 2448.5359,662.6069,11.4609, 235.508994,1189.169897,1080.339966, 5456234, 0, 3);
	AH(261, 2397.5869,654.8775,11.4609, 235.508994,1189.169897,1080.339966, 5676543, 0, 3);
	AH(262, 2368.5471,654.0436,11.4609, 235.508994,1189.169897,1080.339966, 5675645, 0, 3);
	AH(263, 2346.0674,655.8772,11.4605, 235.508994,1189.169897,1080.339966, 5654645, 0, 3);
	AH(264, 2318.1245,655.2443,11.4531, 225.630997,1022.479980,1084.069946, 5645646, 0, 7);
	AH(265, 2317.0225,691.7762,11.4609, 235.508994,1189.169897,1080.339966, 5645664, 0, 3);
	AH(266, 2346.2971,692.3488,11.4609, 235.508994,1189.169897,1080.339966, 5654644, 0, 3);
	AH(267, 2368.5310,690.8256,11.4605, 235.508994,1189.169897,1080.339966, 5465456, 0, 3);
	AH(268, 2397.0134,690.3613,11.4531, 235.508994,1189.169897,1080.339966, 56546546, 0, 3);
	AH(269, 2398.4294,734.5840,11.4609, 235.508994,1189.169897,1080.339966, 5324234, 0, 3);
	AH(270, 2368.9565,733.9152,11.4609, 225.756989,1240.000000,1082.149902, 5096776, 0, 2);
	AH(271, 2346.4688,735.7036,11.4683, 235.508994,1189.169897,1080.339966, 5567889, 0, 3);
	AH(272, 2257.6523,735.5864,11.4609, 225.756989,1240.000000,1082.149902, 5534224, 0, 2);
	AH(273, 2228.3455,734.3983,11.4609, 235.508994,1189.169897,1080.339966, 5111234, 0, 3);
	AH(274, 2205.8569,735.7853,11.4683, 235.508994,1189.169897,1080.339966, 5656665, 0, 3);
	AH(275, 2177.9185,733.8347,11.4609, 235.508994,1189.169897,1080.339966, 5654222, 0, 3);
	AH(276, 2167.9397,772.7470,11.4609, 235.508994,1189.169897,1080.339966, 5566544, 0, 3);
	AH(277, 2177.2441,691.5108,11.4609, 223.043991,1289.259888,1082.199951, 5009766, 0, 1);
	AH(278, 2206.4192,692.2262,11.4609, 235.508994,1189.169897,1080.339966, 5433225, 0, 3);
	AH(279, 2228.6211,691.0995,11.4605, 235.508994,1189.169897,1080.339966, 5874356, 0, 3);
	AH(280, 2256.6799,691.6639,11.4531, 225.630997,1022.479980,1084.069946, 5059846, 0, 7);
	AH(281, 2257.9534,655.3779,11.4531, 235.508994,1189.169897,1080.339966, 5456535, 0, 3);
	AH(282, 2229.0615,654.1979,11.4609, 235.508994,1189.169897,1080.339966, 6565435, 0, 3);
	AH(283, 2206.5686,656.0242,11.4683, 235.508994,1189.169897,1080.339966, 5656544, 0, 3);
	AH(284, 2178.0205,655.2883,11.4609, 235.508994,1189.169897,1080.339966, 5654654, 0, 3);
	AH(285, 2065.6084,650.7788,11.4683,235.508994,1189.169897,1080.339966, 5566543, 0, 3);
	AH(286, 2123.3735,652.5804,11.4609, 235.508994,1189.169897,1080.339966, 5654654, 0, 3);
	AH(287, 2094.4299,652.1225,11.4609, 235.508994,1189.169897,1080.339966, 5654645, 0, 3);
	AH(288, 2043.3572,652.5823,11.4609, 235.508994,1189.169897,1080.339966, 5654654, 0, 3);
	AH(289, 2013.7217,651.1590,11.4609, 235.508994,1189.169897,1080.339966, 523342, 0, 3);
	AH(290, 2011.4912,693.9105,11.4609, 235.508994,1189.169897,1080.339966, 540090, 0, 3);
	AH(291, 2040.6902,695.3324,11.4531, 235.508994,1189.169897,1080.339966, 5000925, 0, 3);
	AH(292, 2068.9075,696.1241,11.4683, 235.508994,1189.169897,1080.339966, 4354355, 0, 3);
	AH(293, 2091.1001,694.2768,11.4609, 235.508994,1189.169897,1080.339966, 5543112, 0, 3);
	AH(294, 2120.4097,696.0903,11.4531, 225.756989,1240.000000,1082.149902, 5432009, 0, 2);
	AH(295, 2123.0061,732.3836,11.4609, 235.508994,1189.169897,1080.339966, 5765990, 0, 3);
	AH(296, 2093.3933,730.8418,11.4531, 235.508994,1189.169897,1080.339966, 5222234, 0, 3);
	AH(297, 2065.1799,731.2031,11.4683, 235.508994,1189.169897,1080.339966, 5657765, 0, 3);
	AH(298, 2042.4044,732.4142,11.4609, 235.508994,1189.169897,1080.339966, 5789000, 0, 3);
	AH(299, 2013.2158,731.0508,11.4531, 225.756989,1240.000000,1082.149902, 5122213, 0, 2);
	AH(300, 2014.0261,773.7195,11.4609, 223.043991,1289.259888,1082.199951, 5655436, 0, 1);
	AH(301, 2043.4078,775.7101,11.4531, 235.508994,1189.169897,1080.339966, 5656223, 0, 3);
	AH(302, 2071.4736,775.9824,11.4605, 235.508994,1189.169897,1080.339966, 5099065, 0, 3);
	AH(303, 2094.0430,774.6208,11.4531, 235.508994,1189.169897,1080.339966, 9845045, 0, 3);
	AH(304, 2123.2778,775.2970,11.4453, 225.630997,1022.479980,1084.069946, 7876685, 0, 7);
	AH(305, 930.0663,1928.3187,11.4683, 235.508994,1189.169897,1080.339966, 5876833, 0, 3);
	AH(306, 886.2585,1980.2817,11.4609, 235.508994,1189.169897,1080.339966, 9990099, 0, 3);
	AH(307, 886.2787,2047.0477,11.4609, 235.508994,1189.169897,1080.339966, 1000000, 0, 3);
	AH(308, 929.8579,2027.7626,11.4683, 223.043991,1289.259888,1082.199951, 5695567, 0, 1);
	AH(309, 926.8140,2006.8304,11.4609, 235.508994,1189.169897,1080.339966, 5765535, 0, 3);
	AH(310, 985.5266,2030.2677,11.4688, 235.508994,1189.169897,1080.339966, 1111235, 0, 3);
	AH(311, 986.3544,2000.5760,11.4609, 235.508994,1189.169897,1080.339966, 1234567, 0, 3);
	AH(312, 983.9779,1978.0562,11.4683, 235.508994,1189.169897,1080.339966, 6578545, 0, 3);
	AH(313, 986.1320,1931.1494,11.4688, 225.630997,1022.479980,1084.069946, 5654456, 0, 7);
	AH(314, 986.0519,1901.2288,11.4609, 235.508994,1189.169897,1080.339966, 7657334, 0, 3);
	AH(315, 984.6308,1878.9839,11.4683, 235.508994,1189.169897,1080.339966, 1311233, 0, 3);
	AH(316, 1029.1394,1847.6263,11.4683, 235.508994,1189.169897,1080.339966, 5123123, 0, 3);
	AH(317, 1029.3234,1876.4167,11.4688, 235.508994,1189.169897,1080.339966, 5324345, 0, 3);
	AH(318, 1028.3359,1905.8287,11.4609, 235.508994,1189.169897,1080.339966, 5098767, 0, 3);
	AH(319, 1029.9962,1928.2714,11.4683, 225.630997,1022.479980,1084.069946, 5090097, 0, 7);
	AH(320, 1029.1876,1976.1206,11.4688, 235.508994,1189.169897,1080.339966, 5004422, 0, 3);
	AH(321, 1028.7371,2005.4742,11.4609, 235.508994,1189.169897,1080.339966, 5543789, 0, 3);
	AH(322, 1029.7041,2028.1865,11.4683, 235.508994,1189.169897,1080.339966, 5117722, 0, 3);
	AH(323, 1085.2087,1976.7711,11.4688, 225.630997,1022.479980,1084.069946, 5069324, 0, 7);
	AH(324, 1086.5486,2000.6774,11.4609, 235.508994,1189.169897,1080.339966, 5977655, 0, 3);
	AH(325, 1085.1422,2031.6770,11.4683, 235.508994,1189.169897,1080.339966, 5000000, 0, 3);
	AH(326, 956.9947,2271.2495,11.4688, 225.630997,1022.479980,1084.069946, 5987600, 0, 7);
	AH(327, 986.4324,2272.2695,11.4609, 235.508994,1189.169897,1080.339966, 5545673, 0, 3);
	AH(328, 1032.5054,2316.2158,11.4683, 235.508994,1189.169897,1080.339966, 5651894, 0, 3);
	AH(329, 986.4071,2313.8188,11.4609, 235.508994,1189.169897,1080.339966, 5589079, 0, 3);
	AH(330, 985.5166,2343.2117,11.4688, 235.508994,1189.169897,1080.339966, 5543124, 0, 3);
	AH(331, 1846.7673,661.3245,11.4609, 225.756989,1240.000000,1082.149902, 5543234, 0, 2);
	AH(332, 1845.7260,690.4466,11.4531, 235.508994,1189.169897,1080.339966, 5009774, 0, 3);
	AH(333, 1845.5311,718.6873,11.4683, 235.508994,1189.169897,1080.339966, 5342211, 0, 3);
	AH(334, 1845.9352,741.4625,11.4609, 235.508994,1189.169897,1080.339966, 5569005, 0, 3);
	AH(335, 1684.9904,2123.3174,11.4609, 225.630997,1022.479980,1084.069946, 5555555, 0, 7);
	AH(336, 1686.8868,2093.8989,11.4609, 235.508994,1189.169897,1080.339966, 6666666, 0, 3);
	AH(337, 1680.4233,2068.5815,11.3594, 235.508994,1189.169897,1080.339966, 1111111, 0, 3);
	AH(338, 1685.0740,2046.4906,11.4688, 235.508994,1189.169897,1080.339966, 2222222, 0, 3);
	AH(339, 1640.7351,2044.8738,11.3199, 225.630997,1022.479980,1084.069946, 3333333, 0, 7);
	AH(340, 1638.8049,2075.7488,11.3125, 235.508994,1189.169897,1080.339966, 4444444, 0, 3);
	AH(341, 1639.4980,2102.6934,11.3125, 235.508994,1189.169897,1080.339966, 5555555, 0, 3);
	AH(342, 1645.4314,2128.1045,11.2031, 235.508994,1189.169897,1080.339966, 6666666, 0, 3);
	AH(343, 1640.5978,2149.6492,11.3125, 235.508994,1189.169897,1080.339966, 7777777, 0, 3);
	AH(344, 1598.3372,2147.2571,11.4609, 225.630997,1022.479980,1084.069946, 8888888, 0, 7);
	AH(345, 1596.5507,2123.3259,11.4609, 235.508994,1189.169897,1080.339966, 9999999, 0, 3);
	AH(346, 1596.4779,2093.8130,11.3125, 225.630997,1022.479980,1084.069946, 10000000, 0, 7);
	AH(347, 1595.8732,2070.7651,11.3199, 235.508994,1189.169897,1080.339966, 5583874, 0, 3);
	AH(348, 1597.4967,2038.3309,11.4688, 235.508994,1189.169897,1080.339966, 5453422, 0, 3);
	AH(349, 1554.4485,2074.9707,11.3594, 235.508994,1189.169897,1080.339966, 5889873, 0, 3);
	AH(350, 1549.7975,2096.4473,11.4609, 223.043991,1289.259888,1082.199951, 1143224, 0, 1);
	AH(351, 1547.9437,2125.4680,11.4609, 225.756989,1240.000000,1082.149902, 5457111, 0, 2);
	AH(352, 1542.0354,2026.9501,14.7396, 235.508994,1189.169897,1080.339966, 9099653, 0, 3);
	AH(353, 1535.0743,2026.9905,14.7396, 235.508994,1189.169897,1080.339966, 7723452, 0, 3);
	AH(354, 1542.6394,2003.7329,14.7396, 235.508994,1189.169897,1080.339966, 1126537, 0, 3);
	AH(355, 1542.5027,1996.9211,14.7396, 223.043991,1289.259888,1082.199951, 5366432, 0, 1);
	AH(356, 1502.8229,2026.9939,14.7396, 235.508994,1189.169897,1080.339966, 9822343, 0, 3);
	AH(357, 1496.6505,2026.9585,14.7396, 235.508994,1189.169897,1080.339966, 7548824, 0, 3);
	AH(358, 1460.8051,2026.9548,14.7396, 235.508994,1189.169897,1080.339966, 1256523, 0, 3);
	AH(359, 1454.3094,2026.9734,14.7396, 223.043991,1289.259888,1082.199951, 9889898, 0, 1);
	AH(360, 1415.2164,2026.7905,14.7396, 235.508994,1189.169897,1080.339966, 4677643, 0, 3);
	AH(361, 1421.6855,2026.9568,14.7396, 235.508994,1189.169897,1080.339966, 2321124, 0, 3);
	AH(362, 1414.3910,2003.2224,14.7396, 225.756989,1240.000000,1082.149902, 5435665, 0, 2);
	AH(363, 1414.4952,1997.0546,14.7396, 235.508994,1189.169897,1080.339966, 8985445, 0, 3);
	AH(364, 1462.5316,1950.6558,11.4683, 235.508994,1189.169897,1080.339966, 2223455, 0, 3);
	AH(365, 1440.0280,1952.7316,11.4609, 235.508994,1189.169897,1080.339966, 1797335, 0, 3);
	AH(366, 1412.7639,1952.5459,11.4531, 225.630997,1022.479980,1084.069946, 8006300, 0, 7);
	AH(367, 1465.7972,1919.9877,11.4609, 235.508994,1189.169897,1080.339966, 1000000, 0, 3);
	AH(368, 1465.0255,1894.9962,11.4609, 235.508994,1189.169897,1080.339966, 2000000, 0, 3);
	AH(369, 1406.2218,1897.6864,11.4609, 235.508994,1189.169897,1080.339966, 3000000, 0, 3);
	AH(370, 1408.0916,1919.6908,11.4688, 225.630997,1022.479980,1084.069946, 432111, 0, 7);
	AH(371, 1365.2458,1896.8778,11.4688, 235.508994,1189.169897,1080.339966, 578982, 0, 3);
	AH(372, 1364.8948,1931.6819,11.4683, 235.508994,1189.169897,1080.339966, 2311883, 0, 3);
	AH(373, 1336.3602,1931.7317,11.4609, 235.508994,1189.169897,1080.339966, 9900778, 0, 3);
	AH(374, 1309.3359,1932.2655,11.4609, 223.043991,1289.259888,1082.199951, 8556870, 0, 1);
	AH(375, 1365.8280,1974.2222,11.4609, 235.508994,1189.169897,1080.339966, 1211225, 0, 3);
	AH(376, 1365.3230,2003.7317,11.4609, 225.756989,1240.000000,1082.149902, 8822441, 0, 2);
	AH(377, 1366.5483,2027.8290,11.4609, 235.508994,1189.169897,1080.339966, 1020304, 0, 3);
	AH(378, 1319.8801,2028.0497,11.4683, 235.508994,1189.169897,1080.339966, 4023944, 0, 3);
	AH(379, 1318.2775,2005.7407,11.4609, 235.508994,1189.169897,1080.339966, 2323664, 0, 3);
	AH(380, 1319.0748,1975.9845,11.4688, 235.508994,1189.169897,1080.339966, 5232111, 0, 3);
	AH(381, 1223.5641,2616.7180,10.8265, 235.508994,1189.169897,1080.339966, 2377335, 0, 3);
	AH(382, 1226.0857,2584.8984,10.8203, 235.508994,1189.169897,1080.339966, 6866668, 0, 3);
	AH(383, 1265.3046,2608.7532,10.8203, 225.630997,1022.479980,1084.069946, 6666666, 0, 7);
	AH(384, 1284.9828,2608.9326,10.8203, 235.508994,1189.169897,1080.339966, 1029394, 0, 3);
	AH(385, 1313.7087,2610.0381,11.2989, 223.043991,1289.259888,1082.199951, 8978553, 0, 1);
	AH(386, 1344.6034,2610.1653,11.2989, 235.508994,1189.169897,1080.339966, 5311245, 0, 3);
	AH(387, 1515.9258,2608.2241,10.8203, 235.508994,1189.169897,1080.339966, 5789235, 0, 3);
	AH(388, 1535.0881,2608.6030,10.8203, 235.508994,1189.169897,1080.339966, 6995442, 0, 3);
	AH(389, 1554.5437,2609.8794,10.8203, 235.508994,1189.169897,1080.339966, 5654211, 0, 3);
	AH(390, 1600.6160,2608.9363,10.8203, 235.508994,1189.169897,1080.339966, 5548885, 0, 3);
	AH(391, 1618.6360,2609.0447,10.8203, 225.630997,1022.479980,1084.069946, 1112525, 0, 7);
	AH(392, 1638.3438,2609.4543,10.8203, 235.508994,1189.169897,1080.339966, 5763215, 0, 3);
	AH(393, 1666.9646,2610.1819,11.2989, 235.508994,1189.169897,1080.339966, 7790000, 0, 3);
	AH(394, 1665.7069,2570.9827,10.8203, 223.043991,1289.259888,1082.199951, 7720304, 0, 1);
	AH(395, 1646.4537,2570.4807,10.8203, 235.508994,1189.169897,1080.339966, 1125522, 0, 3);
	AH(396, 1623.6412,2570.7209,10.8203, 235.508994,1189.169897,1080.339966, 8147327, 0, 3);
	AH(397, 1596.4846,2569.1782,10.8203, 235.508994,1189.169897,1080.339966, 6546224, 0, 3);
	AH(398, 1564.8185,2565.9890,10.8265, 223.043991,1289.259888,1082.199951, 5323242, 0, 1);
	AH(399, 1551.4354,2568.7854,10.8203, 235.508994,1189.169897,1080.339966, 2311155, 0, 3);
	AH(400, 1513.2570,2566.6145,10.8203, 235.508994,1189.169897,1080.339966, 1235772, 0, 3);
	AH(401, 1503.3994,2570.7075,10.8203, 225.630997,1022.479980,1084.069946, 5222222, 0, 7);
	AH(402, 1451.2993,2566.6155,10.8203, 235.508994,1189.169897,1080.339966, 1111115, 0, 3);
	AH(403, 1441.5176,2568.7061,10.8203, 225.756989,1240.000000,1082.149902, 1234321, 0, 2);
	AH(404, 1417.8695,2569.0229,10.8203, 235.508994,1189.169897,1080.339966, 5990088, 0, 3);
	AH(405, 1359.6609,2566.3621,10.8203, 235.508994,1189.169897,1080.339966, 1155222, 0, 3);
	AH(406, 1349.8079,2567.7009,10.8203, 225.630997,1022.479980,1084.069946, 6588344, 0, 7);
	AH(407, 1325.4968,2568.9758,10.8203, 235.508994,1189.169897,1080.339966, 9097552, 0, 3);
	AH(408, 1273.0684,2564.1887,10.8203, 235.508994,1189.169897,1080.339966, 5431123, 0, 3);
	AH(409, 1271.4738,2554.7200,10.8203, 235.508994,1189.169897,1080.339966, 3254112, 0, 3);
	AH(410, 1276.9807,2522.5173,10.8203, 223.043991,1289.259888,1082.199951, 4567722, 0, 1);
	AH(411, 1315.6427,2524.5908,10.8203, 235.508994,1189.169897,1080.339966, 1255221, 0, 3);
	AH(412, 1407.3212,2524.4968,10.8203, 235.508994,1189.169897,1080.339966, 7050302, 0, 3);
	AH(413, 1363.3722,2525.6519,10.8203, 235.508994,1189.169897,1080.339966, 2346722, 0, 3);
	AH(414, 1455.8236,2525.3960,10.8203, 225.630997,1022.479980,1084.069946, 7050222, 0, 7);
	AH(415, 1500.0640,2535.2546,10.8203, 235.508994,1189.169897,1080.339966, 2662345, 0, 3);
	AH(416, 1606.2950,2679.4712,10.8203, 235.508994,1189.169897,1080.339966, 7523462, 0, 3);
	AH(417, 1610.8716,2648.2817,10.8203, 225.630997,1022.479980,1084.069946, 3454234, 0, 7);
	AH(418, 1573.1814,2660.3564,10.8203, 235.508994,1189.169897,1080.339966, 4324111, 0, 3);
	AH(419, 1555.8621,2659.1497,10.8203, 235.508994,1189.169897,1080.339966, 1125675, 0, 3);
	AH(420, 1570.2904,2712.0364,10.8203, 235.508994,1189.169897,1080.339966, 5799935, 0, 3);
	AH(421, 1579.9821,2709.4812,10.8203, 223.043991,1289.259888,1082.199951, 8844223, 0, 1);
	AH(422, 1601.0933,2709.1055,10.8265, 235.508994,1189.169897,1080.339966, 4356343, 0, 3);
	AH(423, 1627.1499,2711.4351,10.8203, 225.756989,1240.000000,1082.149902 , 1465436, 0, 2);
	AH(424, 1652.1755,2710.1426,10.8203, 235.508994,1189.169897,1080.339966, 5098765, 0, 3);
	AH(425, 1563.8232,2757.0371,10.8203, 235.508994,1189.169897,1080.339966, 5009988, 0, 3);
	AH(426, 1563.2615,2776.8362,10.8203, 225.756989,1240.000000,1082.149902, 7449995, 0, 2);
	AH(427, 1563.8850,2793.5535,10.8203, 235.508994,1189.169897,1080.339966, 2644775, 0, 3);
	AH(428, 1678.6174,2690.9729,10.8203, 223.043991,1289.259888,1082.199951, 2333225, 0, 1);
	AH(429, 1703.5941,2690.1616,10.8203, 235.508994,1189.169897,1080.339966, 4324322, 0, 3);
	AH(430, 1735.7419,2692.2913,10.8203, 235.508994,1189.169897,1080.339966, 7611145, 0, 3);
	AH(431, 1672.9608,2802.5720,10.8203, 235.508994,1189.169897,1080.339966, 1111115, 0, 3);
	AH(432, 1655.1476,2801.9287,10.8203, 235.508994,1189.169897,1080.339966, 5112344, 0, 3);
	AH(433, 1637.9235,2803.9402,10.8203, 225.630997,1022.479980,1084.069946, 6768535, 0, 7);
	AH(434, 1618.4098,2801.9072,10.8203, 235.508994,1189.169897,1080.339966, 555555, 0, 3);
	AH(435, 1588.2301,2798.5293,10.8203, 223.043991,1289.259888,1082.199951, 1111111, 0, 1);
	AH(436, 1550.4274,2844.9954,10.8203, 235.508994,1189.169897,1080.339966, 2344566, 0, 3);
	AH(437, 1575.9468,2842.9431,10.8203, 225.756989,1240.000000,1082.149902, 1400998, 0, 2);
	AH(438, 1601.8723,2844.9812,10.8203, 225.630997,1022.479980,1084.069946, 5111122, 0, 7);
	AH(439, 1622.7578,2844.2280,10.8203, 235.508994,1189.169897,1080.339966, 4662235, 0, 3);
	AH(440, 1633.1703,2843.4626,10.8203, 235.508994,1189.169897,1080.339966, 5542214, 0, 3);
	AH(441, 1664.8569,2845.2368,10.8203, 225.630997,1022.479980,1084.069946, 1212225, 0, 7);
	AH(442, 1928.4050,2774.3320,10.8203, 235.508994,1189.169897,1080.339966, 6432352, 0, 3);
	AH(443, 1967.4448,2765.6255,10.8203, 235.508994,1189.169897,1080.339966, 2323415, 0, 3);
	AH(444, 1992.7294,2763.6643,10.8203, 225.756989,1240.000000,1082.149902, 3246622, 0, 2);
	AH(445, 2018.8719,2764.9209,10.8203, 235.508994,1189.169897,1080.339966, 8900998, 0, 3);
	AH(446, 2039.7822,2765.8052,10.8203, 235.508994,1189.169897,1080.339966, 2342344, 0, 3);
	AH(447, 2049.5032,2762.5381,10.8203, 235.508994,1189.169897,1080.339966, 6522344, 0, 3);
	AH(448, 2066.0747,2722.8457,10.8203, 223.043991,1289.259888,1082.199951, 1112232, 0, 1);
	AH(449, 2037.4376,2723.5115,10.8203, 235.508994,1189.169897,1080.339966, 4523545, 0, 3);
	AH(450, 2018.1178,2723.7437,10.8203, 235.508994,1189.169897,1080.339966, 1465436, 0, 3);
	AH(451, 1998.5205,2721.7729,10.8203, 225.756989,1240.000000,1082.149902, 7676545, 0, 2);
	AH(452, 1969.8586,2724.2144,10.8203, 235.508994,1189.169897,1080.339966, 4325234, 0, 3);
	AH(453, 1950.7057,2723.3054,10.8203 , 2262.83,-1137.71,1050.63, 5556667, 0, 10);
	AH(454, 1931.3162,2722.1812,10.8203, 223.043991,1289.259888,1082.199951, 8565475, 0, 1);
	AH(455, 1921.7267,2664.5867,10.8203, 235.508994,1189.169897,1080.339966, 5462211, 0, 3);
	AH(456, 1950.5493,2663.8118,11.0549, 225.630997,1022.479980,1084.069946, 1123225, 0, 7);
	AH(457, 1969.8442,2663.2947,10.8203, 235.508994,1189.169897,1080.339966, 3443212, 0, 3);
	AH(458, 1989.1006,2664.5137,10.8203, 225.630997,1022.479980,1084.069946, 1122221, 0, 7);
	AH(459, 2017.9550,2662.3853,10.8203, 235.508994,1189.169897,1080.339966, 4236523, 0, 3);
	AH(460, 2037.0254,2663.2415,10.8203, 225.630997,1022.479980,1084.069946, 2311255, 0, 7);
	AH(461, 2056.5132,2663.5364,10.8203, 235.508994,1189.169897,1080.339966, 4321122, 0, 3);
	AH(462,-2479.8364,2449.5625,17.3230, 2251.85,-1138.16 ,1050.63 , 1231234, 0, 9);
	AH(463,-2424.8586,2448.5254,13.1577, 235.508994,1189.169897,1080.339966, 1234544, 0, 3);
	AH(464,-2386.3730,2447.3650,10.1694, 235.508994,1189.169897,1080.339966, 7344432, 0, 3);
	AH(465,-2348.6865,2423.2507,7.3367 , 2262.83,-1137.71,1050.63, 1233212, 0, 10);
	AH(466,-2398.5198,2409.3640,8.9084, 235.508994,1189.169897,1080.339966, 1231231, 0, 3);
	AH(467,-2420.9551,2406.4744,13.0269, 235.508994,1189.169897,1080.339966, 2222222, 0, 3);
	AH(468,-2629.8845,2427.6880,14.2392 , 2262.83,-1137.71,1050.63, 1237845, 0, 10);
	AH(469,-2634.9060,2401.9551,11.2425, 235.508994,1189.169897,1080.339966, 9384039, 0, 3);
	AH(470,-2632.4021,2377.6538,9.0000, 295.138977,1474.469971,1080.519897, 4229019, 0, 15);
	AH(471,-2636.0278,2351.5903,8.5156, 235.508994,1189.169897,1080.339966, 7212432, 0, 3);
	AH(472,-2626.4153,2318.6902,8.3050 , 2262.83,-1137.71,1050.63, 7122351, 0, 10);
	AH(473,-2626.7649,2292.1238,8.3078, 235.508994,1189.169897,1080.339966, 1232121, 0, 3);
	AH(474,-2598.2847,2357.1152,9.8830, 225.756989,1240.000000,1082.149902 , 1418954, 0, 2);
	AH(475,-2583.2144,2308.0513,7.0029, 235.508994,1189.169897,1080.339966, 7271094, 0, 3);
	AH(476,-2551.9749,2266.9084,5.4755, 2251.85,-1138.16 ,1050.63 , 2193042, 0, 9);
	AH(477,-2523.5337,2239.3157,5.3984, 235.508994,1189.169897,1080.339966, 7342321, 0, 3);
	AH(478,-2437.4441,2354.4961,5.4431, 235.508994,1189.169897,1080.339966, 1002933, 0, 3);
	AH(479,-150.1606,2688.6116,62.4297 , 2262.83,-1137.71,1050.63, 1234322, 0, 10);
	AH(480,-169.1100,2707.3662,62.5365, 235.508994,1189.169897,1080.339966, 1231231, 0, 3);
	AH(481,99.0296,1178.2466,20.9402, 235.508994,1189.169897,1080.339966, 9059394, 0, 3);
	AH(482,99.2838,1171.5236,20.9402, 235.508994,1189.169897,1080.339966, 4539591, 0, 3);
	AH(483,99.1825,1162.4382,20.9402, 235.508994,1189.169897,1080.339966, 2313123, 0, 3);
	AH(484,84.8197,1161.9630,20.9402 , 2262.83,-1137.71,1050.63, 9983103, 0, 10);
	AH(485,78.1272,1162.2540,20.9402, 235.508994,1189.169897,1080.339966, 4021834, 0, 3);
	AH(486,70.2434,1162.5409,20.9402, 235.508994,1189.169897,1080.339966, 2130490, 0, 3);
	AH(487,25.6419,1181.5530,19.2607, 295.138977,1474.469971,1080.519897, 4212323, 0, 15);
	AH(488,25.8865,1174.7950,19.3864, 235.508994,1189.169897,1080.339966, 1212337, 0, 3);
	AH(489,25.6572,1168.0043,19.5177, 235.508994,1189.169897,1080.339966, 1232227, 0, 3);
	AH(490,25.9481,1161.1768,19.6378, 235.508994,1189.169897,1080.339966, 6212337, 0, 3);
	AH(491,-0.1532,1165.1746,19.5490, 2251.85,-1138.16 ,1050.63 , 4411121, 0, 9);
	AH(492,-0.8000,1172.0820,19.4962, 235.508994,1189.169897,1080.339966, 1231577, 0, 3);
	AH(493,-0.8144,1178.6783,19.4495, 235.508994,1189.169897,1080.339966, 7121234, 0, 3);
	AH(494,-0.8944,1185.8464,19.4014, 225.756989,1240.000000,1082.149902, 6141233, 0, 2);
	AH(495,13.1946,1210.6750,19.3462, 235.508994,1189.169897,1080.339966, 7993831, 0, 3);
	AH(496,13.5492,1219.8981,19.3393 , 2262.83,-1137.71,1050.63, 7000000, 0, 10);
	AH(497,13.8715,1229.2345,19.3415, 235.508994,1189.169897,1080.339966, 1020030, 0, 3);
	AH(498,13.5964,1210.7550,22.5032, 295.138977,1474.469971,1080.519897, 4312311, 0, 15);
	AH(499,13.3161,1220.0972,22.5032, 235.508994,1189.169897,1080.339966, 7125654, 0, 3);
	AH(500,13.6777,1229.4198,22.5032, 235.508994,1189.169897,1080.339966, 1112457, 0, 3);
	AH(501,-17.0590,1215.3190,19.3527 , 2262.83,-1137.71,1050.63, 9481273, 0, 10);
	AH(502,-26.8133,1215.3202,19.3523, 235.508994,1189.169897,1080.339966, 1123317, 0, 3);
	AH(503,-36.1394,1214.8508,19.3523, 235.508994,1189.169897,1080.339966, 1283737, 0, 3);
	AH(504,-17.5794,1214.9105,22.4648, 235.508994,1189.169897,1080.339966, 2342117, 0, 3);
	AH(505,-26.8224,1215.1858,22.4648, 295.138977,1474.469971,1080.519897, 4994322, 0, 15);
	AH(506,-36.2450,1215.2953,22.4648, 235.508994,1189.169897,1080.339966, 7112556, 0, 3);
	AH(507,-68.1879,1221.7731,19.6623, 225.756989,1240.000000,1082.149902, 1233114, 0, 2);
	AH(508,-68.3808,1223.5951,19.6539, 235.508994,1189.169897,1080.339966, 1234667, 0, 3);
	AH(509,-68.4374,1223.8044,22.4403, 2251.85,-1138.16 ,1050.63 , 2885611, 0, 9);
	AH(510,-68.2316,1221.8875,22.4403, 235.508994,1189.169897,1080.339966, 4757382, 0, 3);
	AH(511,-63.3434,1210.5061,22.4365, 235.508994,1189.169897,1080.339966, 10000000, 0, 3);
	AH(512,-63.2997,1234.6383,22.4403, 235.508994,1189.169897,1080.339966, 14000000, 0, 3);
	AH(513,-90.7583,1229.3990,19.7422 , 2262.83,-1137.71,1050.63, 1029234, 0, 10);
	AH(514,-89.0676,1229.5236,19.7422, 235.508994,1189.169897,1080.339966, 20394812, 0, 3);
	AH(515,-78.0208,1234.5022,22.4403, 235.508994,1189.169897,1080.339966, 1231112, 0, 3);
	AH(516,-89.0178,1229.4341,22.4403 , 2262.83,-1137.71,1050.63, 1234562, 0, 10);
	AH(517,-90.7100,1229.6974,22.4403, 235.508994,1189.169897,1080.339966, 1235938, 0, 3);
	AH(518,-101.9765,1234.4877,22.4403, 295.138977,1474.469971,1080.519897, 1231242, 0, 15);
	AH(519,-248.0166,1001.6166,20.9399, 235.508994,1189.169897,1080.339966, 7232342, 0, 3);
	AH(520,-278.8991,1003.4336,20.9399, 225.756989,1240.000000,1082.149902, 2131114, 0, 2);
	AH(521,-258.3535,1043.8475,20.9399, 235.508994,1189.169897,1080.339966, 12312317, 0, 3);
	AH(522,-260.3770,1076.0288,20.9399, 295.138977,1474.469971,1080.519897, 42231222, 0, 15);
	AH(523,-253.1841,1118.3564,20.9399, 235.508994,1189.169897,1080.339966, 12333117, 0, 3);
	AH(524,-258.5248,1151.1722,20.9399, 235.508994,1189.169897,1080.339966, 12699007, 0, 3);
	AH(525,-258.4774,1168.8771,20.9399, 2251.85,-1138.16 ,1050.63 , 2000001, 0, 9);
	AH(526,-290.1943,1176.5304,20.9399, 235.508994,1189.169897,1080.339966, 7918172, 0, 3);
	AH(527,-324.3682,1165.3279,20.9399, 235.508994,1189.169897,1080.339966, 1780297, 0, 3);
	AH(528,-369.4721,1169.1473,20.2719, 295.138977,1474.469971,1080.519897, 4278766, 0, 15);
	AH(529,-321.1074,1124.7561,20.9399, 235.508994,1189.169897,1080.339966, 1223337, 0, 3);
	AH(530,-360.3626,1141.4805,20.9399, 235.508994,1189.169897,1080.339966, 7744427, 0, 3);
	AH(531,-369.8873,1116.7566,20.9399 , 2262.83,-1137.71,1050.63, 7777777, 0, 10);
	AH(532,-42.2204,1122.7028,20.9399, 235.508994,1189.169897,1080.339966, 7332333, 0, 3);
	AH(533,-18.3819,1115.1809,20.9399, 225.756989,1240.000000,1082.149902 , 1233114, 0, 2);
	AH(534,12.8925,1113.1360,20.9399, 295.138977,1474.469971,1080.519897, 4222211, 0, 15);
	AH(536,1.3790,1076.0270,20.9399, 235.508994,1189.169897,1080.339966, 7345612, 0, 3);
	AH(537,-44.9470,1081.5691,20.9399, 235.508994,1189.169897,1080.339966, 7232321, 0, 3);
	AH(538,-32.2207,1038.0431,20.9399 , 2262.83,-1137.71,1050.63, 4321231, 0, 10);
	AH(539,22.7582,968.4547,19.8278, 235.508994,1189.169897,1080.339966, 1234243, 0, 3);
	AH(540,-123.7998,917.7783,19.9380, 295.138977,1474.469971,1080.519897, 4281727, 0, 15);
	AH(541,-298.2243,1115.3505,20.9399, 235.508994,1189.169897,1080.339966, 7000512, 0, 3);
	AH(542,-2192.3000,-2255.4954,30.6926, 235.508994,1189.169897,1080.339966, 322337, 0, 3);
	AH(543,-2193.4658,-2254.1321,30.7029 , 2262.83,-1137.71,1050.63, 7432432, 0, 10);
	AH(544,-2192.1528,-2255.3618,33.3203, 235.508994,1189.169897,1080.339966, 1838441, 0, 3);
	AH(545,-2193.2573,-2254.1514,33.3203, 295.138977,1474.469971,1080.519897, 4242344, 0, 15);
	AH(546,-2199.1951,-2243.4690,33.3203, 235.508994,1189.169897,1080.339966, 7423112, 0, 3);
	AH(547,-2180.5261,-2258.2610,33.3203, 225.756989,1240.000000,1082.149902, 1211234, 0, 2);
	AH(548,-2076.0110,-2312.4868,31.1313, 235.508994,1189.169897,1080.339966, 7578852, 0, 3);
	AH(549,-2220.2219,-2400.0315,32.5823, 2251.85,-1138.16 ,1050.63 , 2109130, 0, 9);
	AH(550,-2238.8813,-2424.0989,32.7073, 235.508994,1189.169897,1080.339966, 7007259, 0, 3);
	AH(551,-2214.1743,-2451.6204,31.8163, 235.508994,1189.169897,1080.339966, 7123454, 0, 3);
	AH(552,-2224.5120,-2482.8005,31.8163, 295.138977,1474.469971,1080.519897, 4243221, 0, 15);
	AH(553,-2199.4382,-2512.0239,31.8163, 235.508994,1189.169897,1080.339966, 7111234, 0, 3);
	AH(554,-2173.9307,-2481.8376,31.8163 , 2262.83,-1137.71,1050.63, 7091274, 0, 10);
	AH(555,-2180.9346,-2520.0579,31.8163, 235.508994,1189.169897,1080.339966, 3019202, 0, 3);
	AH(556,-2161.4189,-2535.3582,31.8163, 235.508994,1189.169897,1080.339966, 3256787, 0, 3);
	AH(557,-2132.5918,-2511.1445,31.8163, 225.756989,1240.000000,1082.149902, 1423568, 0, 2);
	AH(558,-2057.4421,-2464.5544,31.1797, 235.508994,1189.169897,1080.339966, 7000921, 0, 3);
	AH(559,313.1499,-121.3396,3.5354, 235.508994,1189.169897,1080.339966, 1232343, 0, 3);
	AH(560,312.9083,-92.4142,3.5354, 235.508994,1189.169897,1080.339966, 3102931, 0, 3);
	AH(561,295.1371,-54.5454,2.7772, 235.508994,1189.169897,1080.339966, 3654432, 0, 3);
	AH(562,271.6475,-49.3462,2.7772, 235.508994,1189.169897,1080.339966, 1255431, 0, 3);
	AH(563,251.9836,-92.4734,3.5354 , 2262.83,-1137.71,1050.63, 9938378, 7000512, 10);
	AH(564,252.0573,-121.2653,3.5354, 235.508994,1189.169897,1080.339966, 7, 0, 3);
	AH(565,208.9264,-112.6198,1.5508, 235.508994,1189.169897,1080.339966, 7000512, 0, 3);
	AH(566,201.5983,-120.1154,1.5515, 295.138977,1474.469971,1080.519897, 1398431, 0, 15);
	AH(567,189.4799,-120.1606,1.5485, 235.508994,1189.169897,1080.339966, 7345612, 0, 3);
	AH(568,178.3153,-120.2247,1.5490, 2251.85,-1138.16 ,1050.63 , 1698972, 0, 9);
	AH(569,166.3112,-120.2347,1.5549, 225.756989,1240.000000,1082.149902 , 1169897, 0, 2);
	AH(570,158.8308,-112.6853,1.5566, 235.508994,1189.169897,1080.339966, 1695897, 0, 3);
	AH(571,158.7140,-102.5356,1.5567, 235.508994,1189.169897,1080.339966, 2598947, 0, 3);
	AH(572,166.3926,-94.9756,1.5548, 295.138977,1474.469971,1080.519897, 1398431, 0, 15);
	AH(573,201.1507,-95.3074,1.5548, 235.508994,1189.169897,1080.339966, 7212331, 0, 3);
	AH(574,207.0641,-112.4350,4.8965, 235.508994,1189.169897,1080.339966, 1221544, 0, 3);
	AH(575,201.3110,-118.1168,4.8965 , 2262.83,-1137.71,1050.63, 9878904, 0, 10);
	AH(576,201.2922,-97.0621,4.8965, 235.508994,1189.169897,1080.339966, 2021923, 0, 3);
	AH(577,189.4436,-97.5701,4.8965, 225.756989,1240.000000,1082.149902 , 1234451, 0, 2);
	AH(578,178.2575,-118.1482,4.8965, 235.508994,1189.169897,1080.339966, 3737371, 0, 3);
	AH(579,166.3072,-118.2172,4.8965, 235.508994,1189.169897,1080.339966, 2366211, 0, 3);
	AH(580,160.8227,-112.7150,4.8965, 295.138977,1474.469971,1080.519897, 4278874, 0, 15);
	AH(581,160.6612,-102.6043,4.8965, 235.508994,1189.169897,1080.339966, 1223124, 0, 3);
	AH(582,166.1419,-97.2744,4.8965, 235.508994,1189.169897,1080.339966, 3654432, 0, 3);
	AH(583,178.3748,-97.0883,4.8965, 2251.85,-1138.16 ,1050.63 , 2214151, 0, 9);
	AH(584,745.2591,-591.1395,18.0129, 235.508994,1189.169897,1080.339966, 1398431, 0, 3);
	AH(585,736.7197,-556.4312,18.0129, 225.756989,1240.000000,1082.149902 , 1223614, 0, 2);
	AH(586,743.2166,-509.8098,18.0129, 235.508994,1189.169897,1080.339966, 1235565, 0, 3);
	AH(587,768.2311,-503.8455,18.0129, 235.508994,1189.169897,1080.339966, 6478766, 0, 3);
	AH(588,766.6279,-556.4467,18.0129, 295.138977,1474.469971,1080.519897, 4289991, 0, 15);
	AH(589,795.2384,-506.3445,18.0129, 235.508994,1189.169897,1080.339966, 1256653, 0, 3);
	AH(590,818.1949,-509.6891,18.0129, 235.508994,1189.169897,1080.339966, 7223333, 0, 3);
	AH(591,2548.9136,25.1963,27.6756, 225.756989,1240.000000,1082.149902 , 1412455, 0, 2);
	AH(592,2550.7310,-5.4520,27.6756, 2251.85,-1138.16 ,1050.63 , 1919191, 0, 9);
	AH(593,2551.1487,57.2593,27.6756 , 2262.83,-1137.71,1050.63, 6692102, 0, 10);
	AH(594,2556.7883,87.8762,27.6756, 235.508994,1189.169897,1080.339966, 2312562, 0, 3);
	AH(595,2542.0554,136.0530,27.6835, 235.508994,1189.169897,1080.339966, 1233367, 0, 3);
	AH(596,2518.4202,128.8789,27.6756, 295.138977,1474.469971,1080.519897, 8457659, 0, 15);
	AH(597,2480.6208,126.8499,27.6756, 235.508994,1189.169897,1080.339966, 3457814, 0, 3);
	AH(598,2462.7288,134.3904,27.6756, 225.756989,1240.000000,1082.149902 , 9001827, 0, 2);
	AH(599,2444.2432,92.0690,28.4416, 2251.85,-1138.16 ,1050.63 , 2187534, 0, 9);
	AH(600,2443.2432,61.4471,28.4416, 235.508994,1189.169897,1080.339966, 3654432, 0, 3);
	AH(601,2413.6099,61.5918,28.4416, 295.138977,1474.469971,1080.519897, 8457659, 0, 15);
	AH(602,2509.4155,11.4301,28.4416, 235.508994,1189.169897,1080.339966, 1398431, 0, 3);
	AH(603,2513.3884,-28.1216,28.4416, 2251.85,-1138.16 ,1050.63 , 6701992, 0, 9);
	AH(604,2488.3748,11.1817,28.4416, 235.508994,1189.169897,1080.339966, 1222312, 0, 3);
	AH(605,2484.4451,-27.8614,28.4416, 2251.85,-1138.16 ,1050.63 , 5432123, 0, 9);
	AH(606,2511.6030,56.8812,27.6835, 225.756989,1240.000000,1082.149902 , 14, 0, 2);
	AH(607,2514.2820,94.6716,27.6835, 2251.85,-1138.16 ,1050.63 , 8457659, 0, 9);
	AH(608,2479.3777,94.3961,27.6835, 295.138977,1474.469971,1080.519897, 6478766, 0, 15);
	AH(609,2481.0779,64.4782,27.6835, 235.508994,1189.169897,1080.339966, 7, 0, 3);
	AH(610,2439.5234,24.5970,27.6835 , 2262.83,-1137.71,1050.63, 5059846, 0, 10);
	AH(611,2448.5906,-11.1133,27.6835, 2251.85,-1138.16 ,1050.63 , 1059846, 0, 9);
	AH(612,2418.2100,-11.4717,27.6835, 235.508994,1189.169897,1080.339966, 7, 0, 3);
	AH(613,2416.5774,17.8637,27.6835, 295.138977,1474.469971,1080.519897, 42, 0, 15);
	AH(614,2438.7524,-54.9548,28.1535, 235.508994,1189.169897,1080.339966, 7, 0, 3);
	AH(615,2415.5557,-51.9576,28.1535, 225.756989,1240.000000,1082.149902 , 14, 0, 2);
	AH(616,2392.3438,-54.7571,28.1536, 235.508994,1189.169897,1080.339966, 3654432, 0, 3);
	AH(617,2367.5012,-49.0787,28.1535, 2262.83,-1137.71,1050.63, 5059846, 0, 10);
	AH(618,2374.6135,-8.5779,28.4416, 2251.85,-1138.16 ,1050.63 , 8859846, 0, 9);
	AH(619,2374.5554,21.8637,28.4416, 235.508994,1189.169897,1080.339966, 7052946, 0, 3);
	AH(620,2374.2739,42.1750,28.4416, 295.138977,1474.469971,1080.519897, 1059846, 0, 15);
	AH(621,2373.8489,71.1749,28.4416, 235.508994,1189.169897,1080.339966, 2959846, 0, 3);
	AH(622,2398.3145,111.2155,28.4416, 235.508994,1189.169897,1080.339966, 7059846, 0, 3);
	AH(623,2363.2319,116.0651,28.4416, 2251.85,-1138.16 ,1050.63 , 1053846, 0, 9);
	AH(624,2363.4934,142.0408,28.4416, 2251.85,-1138.16 ,1050.63 , 7059846, 0, 9);
	AH(625,2363.5833,166.0538,28.4416, 235.508994,1189.169897,1080.339966, 5129846, 0, 3);
	AH(626,2363.5007,187.1369,28.4416, 235.508994,1189.169897,1080.339966, 5059846, 0, 3);
	AH(627,2324.2815,191.1117,28.4416, 295.138977,1474.469971,1080.519897, 6478766, 0, 15);
	AH(628,2323.9983,162.2565,28.4416, 235.508994,1189.169897,1080.339966, 7059846, 0, 3);
	AH(629,2323.8521,136.3769,28.4416, 225.756989,1240.000000,1082.149902 , 1259846, 0, 2);
	AH(630,2324.1704,116.1966,28.4416, 235.508994,1189.169897,1080.339966, 9059846, 0, 3);
	AH(631,2269.5481,111.2980,28.4416, 2262.83,-1137.71,1050.63, 1059846, 0, 10);
	AH(632,2249.2656,111.1753,28.4416, 235.508994,1189.169897,1080.339966, 7043845, 0, 3);
	AH(633,2236.4487,167.8317,28.1535, 225.756989,1240.000000,1082.149902 , 1412345, 0, 2);
	AH(634,2257.9639,168.2796,28.1536, 235.508994,1189.169897,1080.339966, 7342543, 0, 3);
	AH(635,2285.8784,161.2078,28.4416, 295.138977,1474.469971,1080.519897, 3654432, 0, 15);
	AH(636,2204.5010,62.2448,28.4416, 235.508994,1189.169897,1080.339966, 7123432, 0, 3);
	AH(637,2204.6418,106.1341,28.4416, 235.508994,1189.169897,1080.339966, 7123345, 0, 3);
	AH(638,2270.5022,-7.6668,28.1535, 225.756989,1240.000000,1082.149902 , 1412122, 0, 2);
	AH(639,2245.5559,-2.1308,28.1536, 235.508994,1189.169897,1080.339966, 6765551, 0, 3);
	AH(640,2200.1843,-37.3206,28.1535, 295.138977,1474.469971,1080.519897, 4212123, 0, 15);
	AH(641,2197.6304,-60.7129,28.1535, 235.508994,1189.169897,1080.339966, 7125541, 0, 3);
	AH(642,2203.4656,-89.1974,28.1535, 2251.85,-1138.16 ,1050.63 , 2149012, 0, 9);
	AH(643,2245.4939,-122.1871,28.1535, 2251.85,-1138.16 ,1050.63 , 2121235, 0, 9);
	AH(644,2272.2544,-118.7911,28.1535, 235.508994,1189.169897,1080.339966, 1212331, 0, 3);
	AH(645,2293.7383,-124.9438,28.1535, 225.756989,1240.000000,1082.149902 , 1421321, 0, 2);
	AH(646,2313.7925,-124.9090,28.1536, 235.508994,1189.169897,1080.339966, 7312221, 0, 3);
	AH(647,2322.3223,-124.5191,28.1536, 295.138977,1474.469971,1080.519897, 4213231, 0, 15);
	AH(648,-2382.7537,1336.4448,12.7873, 235.508994,1189.169897,1080.339966, 7333333, 0, 3);
	AH(649,-2382.6113,1317.9901,16.2165, 235.508994,1189.169897,1080.339966, 3333333, 0, 3);
	AH(650,-2382.6799,1299.8810,19.5880, 225.756989,1240.000000,1082.149902 , 1392039, 0, 2);
	AH(651,-2382.2356,1281.6713,22.9578, 2262.83,-1137.71,1050.63, 7123475, 0, 10);
	AH(652,-2382.7966,1263.0306,26.3342, 235.508994,1189.169897,1080.339966, 3654432, 0, 3);
	AH(653,-2382.5232,1244.9596,29.7047, 2262.83,-1137.71,1050.63, 6523475, 0, 10);
	AH(654,-2382.4023,1226.8619,33.0794, 2251.85,-1138.16 ,1050.63 , 8163475, 0, 9);
	AH(655,-2351.6091,1226.3654,33.0559, 295.138977,1474.469971,1080.519897, 1263475, 0, 15);
	AH(656,-2351.5444,1244.6011,29.6924, 235.508994,1189.169897,1080.339966, 2163475, 0, 3);
	AH(657,-2351.7942,1263.0247,26.3264, 2251.85,-1138.16 ,1050.63 , 1163475, 0, 9);
	AH(658,-2351.3711,1281.2766,22.9429, 2262.83,-1137.71,1050.63, 7363475, 0, 10);
	AH(659,-2351.2290,1299.3850,19.5823, 235.508994,1189.169897,1080.339966, 6543475, 0, 3);
	AH(660,-2351.5166,1317.9464,16.2085, 2262.83,-1137.71,1050.63, 1211634, 0, 10);
	AH(661,-2351.3672,1336.1957,12.7754, 295.138977,1474.469971,1080.519897, 6478766, 0, 15);
	AH(662,1938.2157,-1911.2379,15.2568, 225.756989,1240.000000,1082.149902, 4363475, 0, 7);
	AH(663,1928.4265,-1916.1588,15.2568, 385.803986,1471.769897,1080.209961, 3363475, 0, 15);
	AH(664,1913.4309,-1911.9148,15.2568, 295.138977,1474.469971,1080.519897, 1263475, 0, 15);
	AH(665,1891.8883,-1914.5243,15.2568, 295.138977,1474.469971,1080.519897, 7763475, 0, 15);
	AH(666,1872.2472,-1911.8446,15.2568, 328.493988,1480.589966,1084.449951, 1263475, 0, 15);
	AH(667,1853.9954,-1914.6844,15.2568, 295.138977,1474.469971,1080.519897, 1231245, 0, 15);
	AH(668,2437.9812,-2020.7391,13.9025, 385.803986,1471.769897,1080.209961, 1233330, 0, 15);
	AH(669,2465.4609,-2020.6516,14.1242, 295.138977,1474.469971,1080.519897, 3654432, 0, 15);
	AH(670,2486.4185,-2021.5004,13.9988, 225.756989,1240.000000,1082.149902, 1223562, 0, 7);
	AH(671,2507.9573,-2020.8921,14.2101, 295.138977,1474.469971,1080.519897, 1112354, 0, 15);
	AH(672,2522.7310,-2019.0156,14.0744, 295.138977,1474.469971,1080.519897, 6478766, 0, 15);
	AH(673,2524.3853,-1998.3442,14.1131, 328.493988,1480.589966,1084.449951, 4334411, 0, 15);
	AH(674,2508.2136,-1998.4786,13.9025, 295.138977,1474.469971,1080.519897, 4211111, 0, 15);
	AH(675,2483.4810,-1995.3455,13.8343, 385.803986,1471.769897,1080.209961, 3000000, 0, 15);
	AH(676,2465.1836,-1995.7559,14.0193, 295.138977,1474.469971,1080.519897, 3654432, 0, 15);
	AH(677,2696.3506,-1990.4370,14.2229, 225.756989,1240.000000,1082.149902, 4123331, 0, 7);
	AH(678,2672.6646,-1989.4749,14.3240, 295.138977,1474.469971,1080.519897, 4213244, 0, 15);
	AH(679,2652.8423,-1989.4265,13.9988, 295.138977,1474.469971,1080.519897, 4276521, 0, 15);
	AH(680,2637.0813,-1991.7052,14.3240, 295.138977,1474.469971,1080.519897, 4878911, 0, 15);
	AH(681,2635.5317,-2012.8113,14.1443, 328.493988,1480.589966,1084.449951, 3331567, 0, 15);
	AH(682,2650.6980,-2021.8434,14.1766, 295.138977,1474.469971,1080.519897, 4243267, 0, 15);
	AH(683,2673.2744,-2020.2809,14.1682, 385.803986,1471.769897,1080.209961, 3043282, 0, 15);
	AH(684,2695.3606,-2020.5419,14.0223, 295.138977,1474.469971,1080.519897, 4256811, 0, 15);
	AH(685,2707.4373,-1238.0441,59.7015, 295.138977,1474.469971,1080.519897, 4293730, 0, 15);
	AH(686,2707.4673,-1233.4779,60.9375, 385.803986,1471.769897,1080.209961, 3018920, 0, 15);
	AH(687,2707.3911,-1229.1610,62.3185, 295.138977,1474.469971,1080.519897, 4112032, 0, 15);
	AH(688,2707.7410,-1224.6965,63.4531, 295.138977,1474.469971,1080.519897, 5042123, 0, 15);
	AH(689,2707.3076,-1220.5635,64.8799, 225.756989,1240.000000,1082.149902, 4232442, 0, 7);
	AH(690,2707.3230,-1216.3718,66.2324, 225.756989,1240.000000,1082.149902, 421221, 0, 7);
	AH(691,2707.3728,-1211.9144,67.6321, 295.138977,1474.469971,1080.519897, 4212333, 0, 15);
	AH(692,2707.3513,-1207.5356,68.7613, 295.138977,1474.469971,1080.519897, 3654432, 0, 15);
	AH(693,2707.3267,-1203.0417,69.6903, 295.138977,1474.469971,1080.519897, 4167421, 0, 15);
	AH(694,2707.3091,-1200.0376,70.4610, 385.803986,1471.769897,1080.209961, 3888510, 0, 15);
	AH(695,2690.6067,-1200.0519,68.3102, 295.138977,1474.469971,1080.519897, 4212554, 0, 15);
	AH(696,2690.7642,-1203.0842,67.4894, 295.138977,1474.469971,1080.519897, 4321362, 0, 15);
	AH(697,2690.5559,-1207.6774,66.5910, 328.493988,1480.589966,1084.449951, 3019213, 0, 15);
	AH(698,2690.6108,-1211.8523,65.4688, 295.138977,1474.469971,1080.519897, 4200129, 0, 15);
	AH(699,2690.8506,-1216.3328,64.0342, 295.138977,1474.469971,1080.519897, 4209122, 0, 15);
	AH(700,2690.6951,-1220.6685,62.7479, 385.803986,1471.769897,1080.209961, 3122130, 0, 15);
	AH(701,2690.5730,-1224.7726,61.4289, 295.138977,1474.469971,1080.519897, 1254352, 0, 15);
	AH(702,2690.7449,-1229.2260,60.1102, 385.803986,1471.769897,1080.209961, 3543770, 0, 15);
	AH(703,2690.5535,-1233.4324,58.9098, 295.138977,1474.469971,1080.519897, 4423112, 0, 15);
	AH(704,2690.8362,-1238.0139,57.4893, 295.138977,1474.469971,1080.519897, 4543532, 0, 15);
	AH(705,2670.3049,-1237.9683,55.7367, 328.493988,1480.589966,1084.449951, 3324323, 0, 15);
	AH(706,2670.3252,-1233.5840,57.1161, 295.138977,1474.469971,1080.519897, 4122252, 0, 15);
	AH(707,2670.2864,-1229.2539,58.3534, 295.138977,1474.469971,1080.519897, 4121672, 0, 15);
	AH(708,2670.2874,-1224.7068,59.6329, 295.138977,1474.469971,1080.519897, 3654432, 0, 15);
	AH(709,2670.2866,-1220.4866,60.9239, 225.756989,1240.000000,1082.149902, 1254352, 0, 7);
	AH(710,2670.5229,-1216.4006,62.2646, 295.138977,1474.469971,1080.519897, 4200112, 0, 15);
	AH(711,2670.3953,-1211.6744,63.6812, 385.803986,1471.769897,1080.209961, 3917230, 0, 15);
	AH(712,2670.3591,-1207.6375,64.7994, 295.138977,1474.469971,1080.519897, 5348674, 0, 15);
	AH(713,2670.4854,-1203.0214,65.7347, 295.138977,1474.469971,1080.519897, 8887841, 0, 15);
	AH(714,2670.5710,-1199.9965,66.5057, 295.138977,1474.469971,1080.519897, 4123332, 0, 15);
	AH(715,2614.9617,-1237.9956,49.9844, 328.493988,1480.589966,1084.449951, 3454333, 0, 15);
	AH(716,2608.3860,-1238.0017,49.9844, 295.138977,1474.469971,1080.519897, 4227882, 0, 15);
	AH(717,2608.1912,-1233.6421,51.6111, 385.803986,1471.769897,1080.209961, 1254352, 0, 15);
	AH(718,2615.0962,-1233.4479,51.3828, 295.138977,1474.469971,1080.519897, 1233142, 0, 15);
	AH(719,2615.0505,-1229.2389,52.6094, 295.138977,1474.469971,1080.519897, 4267102, 0, 15);
	AH(720,2608.1638,-1229.2615,52.8349, 225.756989,1240.000000,1082.149902, 6478766, 0, 7);
	AH(721,2615.1123,-1224.9520,53.8984, 385.803986,1471.769897,1080.209961, 1234230, 0, 15);
	AH(722,2608.4854,-1224.7083,53.8984, 225.756989,1240.000000,1082.149902, 4477212, 0, 7);
	AH(723,2608.1833,-1220.5696,55.4178, 295.138977,1474.469971,1080.519897, 4938352, 0, 15);
	AH(724,2615.0305,-1220.6317,55.1875, 295.138977,1474.469971,1080.519897, 4128732, 0, 15);
	AH(725,2615.1038,-1216.3197,56.5391, 295.138977,1474.469971,1080.519897, 1123832, 0, 15);
	AH(726,2608.1538,-1216.3726,56.7609, 225.756989,1240.000000,1082.149902, 4167882, 0, 7);
	AH(727,2608.1509,-1211.7645,58.1495, 295.138977,1474.469971,1080.519897, 6478766, 0, 15);
	AH(728,2615.0354,-1211.7717,57.9375, 385.803986,1471.769897,1080.209961, 3213120, 0, 15);
	AH(729,2614.8450,-1207.7677,59.0703, 295.138977,1474.469971,1080.519897, 4679822, 0, 15);
	AH(730,2608.2708,-1207.5834,59.3084, 295.138977,1474.469971,1080.519897, 4327182, 0, 15);
	AH(731,2615.1079,-1203.0039,60.0000, 295.138977,1474.469971,1080.519897, 1323142, 0, 15);
	AH(732,2608.2969,-1202.9994,60.2480, 328.493988,1480.589966,1084.449951, 1237943, 0, 15);
	AH(733,2608.1594,-1199.9701,60.9936, 295.138977,1474.469971,1080.519897, 8838342, 0, 15);
	AH(734,2614.8792,-1200.0909,60.7813, 295.138977,1474.469971,1080.519897, 5433112, 0, 15);
	AH(735,2587.3303,-1200.1344,59.3578, 328.493988,1480.589966,1084.449951, 3317212, 0, 15);
	AH(736,2587.3699,-1203.1261,58.5760, 385.803986,1471.769897,1080.209961, 3847712, 0, 15);
	AH(737,2587.2891,-1207.4950,57.6515, 295.138977,1474.469971,1080.519897, 9987981, 0, 15);
	AH(738,2587.3965,-1211.8905,56.5144, 295.138977,1474.469971,1080.519897, 3217233, 0, 15);
	AH(739,2587.3958,-1216.3418,55.1144, 295.138977,1474.469971,1080.519897, 2937882, 0, 15);
	AH(740,2587.3916,-1220.5956,53.7654, 225.756989,1240.000000,1082.149902, 3654432, 0, 7);
	AH(741,2587.3916,-1224.6947,52.4771, 295.138977,1474.469971,1080.519897, 8457659, 0, 15);
	AH(742,2587.3972,-1229.2743,51.1906, 295.138977,1474.469971,1080.519897, 6645652, 0, 15);
	AH(743,2587.3899,-1233.5267,49.9621, 328.493988,1480.589966,1084.449951, 3321123, 0, 15);
	AH(744,2587.3330,-1238.0817,48.5644, 295.138977,1474.469971,1080.519897, 4246544, 0, 15);
	AH(745,2550.9485,-1233.7974,49.3318, 385.803986,1471.769897,1080.209961, 3112770, 0, 15);
	AH(746,2529.6584,-1243.3269,43.9719, 295.138977,1474.469971,1080.519897, 8457659, 0, 15);
	AH(747,2514.5081,-1240.4620,39.3406, 295.138977,1474.469971,1080.519897, 4122222, 0, 15);
	AH(748,2492.1074,-1239.0128,37.9054, 225.756989,1240.000000,1082.149902, 4988962, 0, 7);
	AH(749,2472.8367,-1238.1210,32.5695, 295.138977,1474.469971,1080.519897, 6645652, 0, 15);
	AH(750,2467.6282,-1200.4086,36.8117, 295.138977,1474.469971,1080.519897, 4123332, 0, 15);
	AH(751,2520.6797,-1197.9640,56.5963, 328.493988,1480.589966,1084.449951, 3543343, 0, 15);
	AH(752,2550.3176,-1197.5212,60.8432, 295.138977,1474.469971,1080.519897, 3654432, 0, 15);
	AH(753,2485.0645,-1280.2725,30.7508, 295.138977,1474.469971,1080.519897, 1211222, 0, 15);
	AH(754,2482.8047,-1293.3613,30.1889, 225.756989,1240.000000,1082.149902, 8812734, 0, 7);
	AH(755,2433.6038,-1275.0439,24.7567, 295.138977,1474.469971,1080.519897, 1233122, 0, 15);
	AH(756,2434.8032,-1289.4613,25.3479, 385.803986,1471.769897,1080.209961, 1002391, 0, 15);
	AH(757,2433.9319,-1303.3778,25.3234, 295.138977,1474.469971,1080.519897, 6478766, 0, 15);
	AH(758,2433.9421,-1320.6891,25.3234, 295.138977,1474.469971,1080.519897, 4123443, 0, 15);
	AH(759,2439.6008,-1338.8749,24.1016, 225.756989,1240.000000,1082.149902, 4121333, 0, 7);
	AH(760,2439.5977,-1357.2247,24.1008, 385.803986,1471.769897,1080.209961, 1212610, 0, 15);
	AH(761,2388.4141,-1279.6409,25.1291, 295.138977,1474.469971,1080.519897, 1234350, 0, 15);
	AH(762,2387.8582,-1328.3925,25.1242, 328.493988,1480.589966,1084.449951, 3188112, 0, 15);
	AH(763,2389.6003,-1346.1926,25.0770, 295.138977,1474.469971,1080.519897, 4487652, 0, 15);
	AH(764,2383.5344,-1366.3380,24.4914, 295.138977,1474.469971,1080.519897, 1000000, 0, 15);
	AH(765,2373.8835,-1139.1783,29.0588, 295.138977,1474.469971,1080.519897, 2334222, 0, 15);
	AH(766,2394.8416,-1133.5535,30.7188, 328.493988,1480.589966,1084.449951, 6478766, 0, 15);
	AH(767,2427.3413,-1135.7853,34.7109, 295.138977,1474.469971,1080.519897, 5478654, 0, 15);
	AH(768,2488.1475,-1135.6787,39.3993, 385.803986,1471.769897,1080.209961, 3456454, 0, 15);
	AH(769,2510.5220,-1132.6322,41.6207, 295.138977,1474.469971,1080.519897, 4561123, 0, 15);
	AH(770,2626.1838,-1112.6195,67.8551, 295.138977,1474.469971,1080.519897, 5345676, 0, 15);
	AH(771,2626.1853,-1098.7246,69.3595, 385.803986,1471.769897,1080.209961, 5123432, 0, 15);
	AH(772,2627.7263,-1085.2200,69.6163, 295.138977,1474.469971,1080.519897, 5455435, 0, 15);
	AH(773,2628.2166,-1068.0627,69.6119, 328.493988,1480.589966,1084.449951, 3009223, 0, 15);
	AH(774,2576.6760,-1070.7192,69.8322, 295.138977,1474.469971,1080.519897, 4736432, 0, 15);
	AH(775,2572.1382,-1091.5187,67.2257, 295.138977,1474.469971,1080.519897, 4299182, 0, 15);
	AH(776,2519.0403,-1113.1163,56.5926, 295.138977,1474.469971,1080.519897, 4001922, 0, 15);
	AH(778,2470.5500,-1105.3130,44.4879, 225.756989,1240.000000,1082.149902, 4277323, 0, 7);
	AH(779,2457.0479,-1102.1643,43.8672, 295.138977,1474.469971,1080.519897, 4209912, 0, 15);
	AH(780,2438.6096,-1105.6908,43.0816, 295.138977,1474.469971,1080.519897, 4244772, 0, 15);
	AH(781,2407.8701,-1106.9728,40.2957, 328.493988,1480.589966,1084.449951, 3123323, 0, 15);
	AH(782,2249.9412,-1238.6493,25.8984, 295.138977,1474.469971,1080.519897, 4999432, 0, 15);
	AH(783,2229.6345,-1241.6085,25.6563, 385.803986,1471.769897,1080.209961, 1221230, 0, 15);
	AH(784,2209.9126,-1240.1034,24.4801, 295.138977,1474.469971,1080.519897, 8878662, 0, 15);
	AH(785,2191.7285,-1238.8721,24.1574, 295.138977,1474.469971,1080.519897, 3654432, 0, 15);
	AH(786,2191.5264,-1276.1403,25.1563, 328.493988,1480.589966,1084.449951, 5644433, 0, 15);
	AH(787,2207.9995,-1281.1130,24.7902, 295.138977,1474.469971,1080.519897, 1231223, 0, 15);
	AH(788,2229.9802,-1280.5952,25.3672, 295.138977,1474.469971,1080.519897, 4212332, 0, 15);
	AH(789,2250.1353,-1280.4956,25.4766, 385.803986,1471.769897,1080.209961, 7766530, 0, 15);
	AH(790,2148.4385,-1319.7124,25.7433, 295.138977,1474.469971,1080.519897, 2323442, 0, 15);
	AH(791,2126.7131,-1320.5414,26.6241, 295.138977,1474.469971,1080.519897, 2341233, 0, 15);
	AH(792,2100.8733,-1321.6060,25.9531, 295.138977,1474.469971,1080.519897, 6645652, 0, 15);
	AH(793,2129.5623,-1362.0006,25.8058, 328.493988,1480.589966,1084.449951, 4326689, 0, 15);
	AH(794,2147.6812,-1366.6642,25.6418, 295.138977,1474.469971,1080.519897, 1234511, 0, 15);
	AH(795,2185.2017,-1364.0065,25.8293, 295.138977,1474.469971,1080.519897, 1398431, 0, 15);
	AH(796,2202.6660,-1363.9008,25.8605, 295.138977,1474.469971,1080.519897, 6545641, 0, 15);
	AH(797,2230.5024,-1396.5410,24.0000, 295.138977,1474.469971,1080.519897, 4123232, 0, 15);
	AH(798,2243.5818,-1396.9047,24.2433, 385.803986,1471.769897,1080.209961, 1398431, 0, 15);
	AH(799,2256.5852,-1397.1892,24.5738, 295.138977,1474.469971,1080.519897, 6645652, 0, 15);
	AH(800,2263.6616,-1458.5067,24.0081, 295.138977,1474.469971,1080.519897, 4000012, 0, 15);
	AH(801,2247.4182,-1458.5894,24.0222, 295.138977,1474.469971,1080.519897, 1776652, 0, 15);
	AH(802,2232.5459,-1458.6465,24.0182, 225.756989,1240.000000,1082.149902, 1233162, 0, 7);
	AH(803,2196.2307,-1404.0142,25.9488, 295.138977,1474.469971,1080.519897, 1398431, 0, 15);
	AH(804,2194.5574,-1443.1288,25.7433, 328.493988,1480.589966,1084.449951, 3432233, 0, 15);
	AH(805,2191.1853,-1455.8024,26.0000, 295.138977,1474.469971,1080.519897, 9645562, 0, 15);
	AH(806,2191.0405,-1470.5142,25.9141, 295.138977,1474.469971,1080.519897, 1223212, 0, 15);
	AH(807,2190.7246,-1487.6459,25.7746, 225.756989,1240.000000,1082.149902, 5723632, 0, 7);
	AH(808,2148.9182,-1484.7770,26.6242, 295.138977,1474.469971,1080.519897, 2134122, 0, 15);
	AH(809,2146.1553,-1470.4521,25.7121, 328.493988,1480.589966,1084.449951, 5546853, 0, 15);
	AH(810,2151.4167,-1446.2853,25.7746, 295.138977,1474.469971,1080.519897, 3543422, 0, 15);
	AH(811,2149.8484,-1433.7610,26.0703, 385.803986,1471.769897,1080.209961, 2348760, 0, 15);
	AH(812,2150.7898,-1419.0984,25.9219, 328.493988,1480.589966,1084.449951, 2342342, 0, 15);
	AH(813,2150.7126,-1400.6437,25.7980, 225.756989,1240.000000,1082.149902, 1000000, 0, 7);
	AH(814,2023.0815,-1052.9442,25.5961, 235.508994,1189.169897,1080.339966, 3202010, 0, 3);
	AH(815,2035.9565,-1059.4894,25.6508, 235.508994,1189.169897,1080.339966, 2049430, 0, 3);
	AH(816,2051.0059,-1065.7307,25.7836, 225.756989,1240.000000,1082.149902, 2525252, 0, 2);
	AH(817,2061.0439,-1075.3856,25.6511, 235.508994,1189.169897,1080.339966, 5055555, 0, 3);
	AH(818,2109.0969,-1081.9752,25.0357, 235.508994,1189.169897,1080.339966, 5555555, 0, 3);
	AH(819,2082.2766,-1085.6357,25.1688, 295.138977,1474.469971,1080.519897, 4212332, 0, 15);
	AH(820,2140.6106,-1082.6786,24.8878, 235.508994,1189.169897,1080.339966, 1323213, 0, 3);
	AH(821,2207.5625,-1100.6545,31.5547, 235.508994,1189.169897,1080.339966, 2131221, 0, 3);
	AH(822,2099.6187,-1051.7899,28.6443, 225.756989,1240.000000,1082.149902, 4465462, 0, 7);
	AH(823,2083.1812,-1039.7518,32.2093, 235.508994,1189.169897,1080.339966, 5123332, 0, 3);
	AH(824,2093.9878,-1123.0105,27.6899, 235.508994,1189.169897,1080.339966, 3654432, 0, 3);
	AH(825,2095.3562,-1145.2172,26.5929, 385.803986,1471.769897,1080.209961, 3213330, 0, 15);
	AH(826,2092.2419,-1166.4757,26.5859, 235.508994,1189.169897,1080.339966, 1398431, 0, 3);
	AH(827,2091.5068,-1184.3029,27.0571, 225.756989,1240.000000,1082.149902, 1233214, 0, 2);
	AH(828,2045.5991,-1116.4308,26.3617, 235.508994,1189.169897,1080.339966, 2346654, 0, 3);
	AH(829,2022.8518,-1120.2655,26.4210, 295.138977,1474.469971,1080.519897, 6645652, 0, 15);
	AH(830,2000.0448,-1114.0625,27.1250, 235.508994,1189.169897,1080.339966, 2311110, 0, 3);
	AH(831,1955.3672,-1115.3795,27.8305, 235.508994,1189.169897,1080.339966, 2131232, 0, 3);
	AH(832,1938.9694,-1114.5154,27.4523, 385.803986,1471.769897,1080.209961, 6645652, 0, 15);
	AH(833,1921.3103,-1115.0714,27.0883, 225.756989,1240.000000,1082.149902, 4213344, 0, 7);
	AH(834,1905.9553,-1112.9459,26.6641, 235.508994,1189.169897,1080.339966, 4326541, 0, 3);
	AH(835,1886.1357,-1113.8271,26.2758, 385.803986,1471.769897,1080.209961, 3123310, 0, 15);
	AH(836,2090.8140,-1234.9655,25.6887, 235.508994,1189.169897,1080.339966, 6645652, 0, 3);
	AH(837,2110.9827,-1244.3019,25.8516, 225.756989,1240.000000,1082.149902, 2340024, 0, 7);
	AH(838,2133.5005,-1232.7888,24.4219, 235.508994,1189.169897,1080.339966, 3242432, 0, 3);
	AH(839,2153.8130,-1243.6576,25.3672, 385.803986,1471.769897,1080.209961, 3213210, 0, 15);
	AH(840,2150.2534,-1285.0491,24.5269, 225.756989,1240.000000,1082.149902, 1231231, 0, 2);
	AH(841,2132.2656,-1280.0557,25.8906, 225.756989,1240.000000,1082.149902, 4235442, 0, 7);
	AH(842,2111.2378,-1279.3893,25.6875, 295.138977,1474.469971,1080.519897, 4788872, 0, 15);
	AH(843,2090.9160,-1277.8357,26.1797, 235.508994,1189.169897,1080.339966, 5223333, 0, 3);
	AH(844,315.8664,-1769.9153,4.6359, 244.411987,305.032989,999.148437, 8732421, 0, 1);
	AH(845,305.3469,-1770.6858,4.5383, 2324.419921,-1145.568359,1050.710083, 1233563, 0, 12);
	AH(846,295.3478,-1764.1213,4.8688, 302.180999,300.722991,999.148437, 1233563, 0, 4);
	AH(847,280.9199,-1767.6204,4.5428, 244.411987,305.032989,999.148437, 3213563, 0, 1);
	AH(848,206.9045,-1769.9493,4.3521, 2527.654052,-1679.388305,1015.498596, 6523563, 0, 1);
	AH(849,192.9165,-1770.0885,4.3089, 2807.619873,-1171.899902,1025.570312, 6645652, 0, 8);
	AH(850,167.0929,-1759.0422,6.7969, 2350.339843,-1181.649902,1027.976562, 8733563, 0, 5);
	AH(851,653.5953,-1714.0706,14.7648, 225.630997,1022.479980,1084.069946, 5327563, 0, 7);
	AH(852,652.5613,-1693.8149,14.5501, 2324.419921,-1145.568359,1050.710083, 1983563, 0, 12);
	AH(853,657.1381,-1652.7421,15.4063, 2807.619873,-1171.899902,1025.570312, 7233983, 0, 8);
	AH(854,656.0573,-1636.6881,15.8617, 244.411987,305.032989,999.148437, 12543263, 0, 1);
	AH(855,653.0207,-1619.9291,15.0000, 302.180999,300.722991,999.148437, 6237533, 0, 4);
	AH(856,660.5674,-1599.2832,15.0000, 2527.654052,-1679.388305,1015.498596, 14232563, 0, 1);
	AH(857,693.5491,-1705.8533,3.8195, 225.630997,1022.479980,1084.069946, 8199563, 0, 7);
	AH(858,694.8187,-1690.4854,4.3461, 2350.339843,-1181.649902,1027.976562, 2222356, 0, 5);
	AH(859,693.7621,-1645.7404,4.0938, 2807.619873,-1171.899902,1025.570312, 7311222, 0, 8);
	AH(860,697.2797,-1627.0441,3.7492, 2324.419921,-1145.568359,1050.710083, 5331212, 0, 12);
	AH(861,692.9280,-1602.7703,15.0469, 225.630997,1022.479980,1084.069946, 5233333, 0, 7);
	AH(862,766.9235,-1605.7656,13.8039, 244.411987,305.032989,999.148437, 5122333, 0, 1);
	AH(863,768.0778,-1655.8882,5.6094, 302.180999,300.722991,999.148437, 5323215, 0, 4);
	AH(864,769.2278,-1696.5963,5.1554, 2324.419921,-1145.568359,1050.710083, 5312333, 0, 12);
	AH(865,769.2252,-1745.6908,13.0773, 2527.654052,-1679.388305,1015.498596, 1232233, 0, 1);
	AH(866,769.0544,-1726.2372,13.4321, 2350.339843,-1181.649902,1027.976562, 5231177, 0, 5);
	AH(867,791.5041,-1753.2244,13.4602, 2807.619873,-1171.899902,1025.570312, 11111111, 0, 8);
	AH(868,797.2371,-1729.3353,13.5469, 2324.419921,-1145.568359,1050.710083, 3216543, 0, 12);
	AH(869,793.9889,-1707.5066,14.0382, 302.180999,300.722991,999.148437, 1940274, 0, 4);
	AH(870,794.8871,-1692.0906,14.4633, 244.411987,305.032989,999.148437, 1233563, 0, 1);
	AH(871,791.0280,-1661.1558,13.4852, 2350.339843,-1181.649902,1027.976562, 2134801, 0, 5);
	AH(872,725.6381,-1440.4515,13.5318, 1267.663208,-781.323242,1091.906250, 4004901, 0, 5);
	AH(873,-2905.1040,1178.7921,13.6641, 302.180999,300.722991,999.148437, 5338014, 0, 4);
	AH(874,-2905.2581,1171.6663,13.6641, 302.180999,300.722991,999.148437, 3654432, 0, 4);
	AH(875,-2904.8662,1164.7759,13.6641, 444.646911,508.239044,1001.419494, 6533563, 0, 12);
	AH(876,-2905.2031,1154.8989,13.6641, 302.180999,300.722991,999.148437, 6910372, 0, 4);
	AH(877,-2904.6165,1118.9471,27.0703, 302.180999,300.722991,999.148437, 1777563, 0, 4);
	AH(878,-2904.8096,1111.6368,27.0703, 2807.619873,-1171.899902,1025.570312, 9233563, 0, 8);
	AH(879,-2904.4575,1101.1454,27.0703, 302.180999,300.722991,999.148437, 6645652, 0, 4);
	AH(880,-2900.7102,1080.9773,32.1328, 302.180999,300.722991,999.148437, 6543563, 0, 4);
	AH(881,-2900.7148,1073.7255,32.1328, 444.646911,508.239044,1001.419494, 9999999, 0, 12);
	AH(882,-2900.6904,1067.0050,32.1328, 302.180999,300.722991,999.148437, 7871205, 0, 4);
	AH(883,-2900.4617,1056.8196,32.1328, 302.180999,300.722991,999.148437, 1233563, 0, 4);
	AH(884,-2901.5586,1033.3280,36.8281, 318.564971,1118.209960,1083.882812, 1928739, 0, 5);
	AH(885,-2899.2314,1026.9868,36.8281, 302.180999,300.722991,999.148437, 1231366, 0, 4);
	AH(886,-2895.6216,1017.0563,36.8281, 302.180999,300.722991,999.148437, 5756756, 0, 4);
	AH(887,-2888.0979,1001.8746,40.7188, 302.180999,300.722991,999.148437, 2342322, 0, 4);
	AH(888,-2884.3665,995.5404,40.7188, 302.180999,300.722991,999.148437, 2346654, 0, 4);
	AH(889,-2881.0962,989.7851,40.7188, 302.180999,300.722991,999.148437, 3654432, 0, 4);
	AH(890,-2875.9771,981.0150,40.7260, 444.646911,508.239044,1001.419494, 8874421, 0, 12);
	AH(891,-2860.7170,963.6118,44.0547, 302.180999,300.722991,999.148437, 1248754, 0, 4);
	AH(892,-2857.7327,957.1736,44.0547, 302.180999,300.722991,999.148437, 6645652, 0, 4);
	AH(893,-2853.2288,947.5258,44.0547, 302.180999,300.722991,999.148437, 2316554, 0, 4);
	AH(894,-2845.3057,928.4491,44.0547, 2807.619873,-1171.899902,1025.570312, 8888888, 0, 8);
	AH(895,-2844.7024,921.3712,44.0547, 302.180999,300.722991,999.148437, 2317632, 0, 4);
	AH(896,-2844.1018,914.5577,44.0547, 302.180999,300.722991,999.148437, 3125646, 0, 4);
	AH(897,-2843.2222,904.5894,44.0547, 444.646911,508.239044,1001.419494, 4230034, 0, 12);
	AH(898,-2840.2278,884.5256,44.0547, 302.180999,300.722991,999.148437, 4324324, 0, 4);
	AH(899,-2840.2275,877.3157,44.0547, 302.180999,300.722991,999.148437, 1112456, 0, 4);
	AH(900,-2840.2280,866.9269,44.0547, 318.564971,1118.209960,1083.882812, 5188567, 0, 5);
	AH(901,-2856.5959,842.0596,39.6497, 302.180999,300.722991,999.148437, 5601927, 0, 4);
	AH(902,-2860.2371,835.7368,39.6108, 444.646911,508.239044,1001.419494, 3654432, 0, 12);
	AH(903,-2863.5999,829.9158,39.5402, 302.180999,300.722991,999.148437, 6645652, 0, 4);
	AH(904,-2868.5156,821.2598,39.4515, 302.180999,300.722991,999.148437, 3654432, 0, 4);
	AH(905,-2880.7170,797.8273,35.1462, 302.180999,300.722991,999.148437, 1229381, 0, 4);
	AH(906,-2881.3420,790.6045,35.1252, 2807.619873,-1171.899902,1025.570312, 5326938, 0, 8);
	AH(907,-2882.2642,779.9017,35.0879, 302.180999,300.722991,999.148437, 9182563, 0, 4);
	AH(908,-2884.7896,750.6721,29.2013, 302.180999,300.722991,999.148437, 1123563, 0, 4);
	AH(909,-2884.1597,743.5260,29.2183, 444.646911,508.239044,1001.419494, 4900832, 0, 12);
	AH(910,-2883.5728,736.7502,29.2112, 302.180999,300.722991,999.148437, 3243242, 0, 4);
	AH(911,-2882.3608,726.8185,29.1994, 302.180999,300.722991,999.148437, 8723497, 0, 4);
	AH(912,-2872.4397,697.5339,23.4624, 444.646911,508.239044,1001.419494, 5434549, 0, 12);
	AH(913,-2869.4412,691.0523,23.4613, 302.180999,300.722991,999.148437, 5354345, 0, 4);
	AH(914,-2864.9331,681.4291,23.4603, 302.180999,300.722991,999.148437, 6645652, 0, 4);
	AH(915,-2721.0154,923.9529,67.5938, 302.180999,300.722991,999.148437, 3213335, 0, 4);
	AH(916,-2706.7463,864.4622,70.7031, 302.180999,300.722991,999.148437, 5999000, 0, 4);
	AH(917,-2738.5342,866.3311,64.8909, 2807.619873,-1171.899902,1025.570312, 5366339, 0, 8);
	AH(918,-2736.8733,846.7408,59.2728, 302.180999,300.722991,999.148437, 5000000, 0, 4);
	AH(919,-2737.8435,836.6534,56.2530, 302.180999,300.722991,999.148437, 5010101, 0, 4);
	AH(920,-2726.6938,829.4630,53.8125, 444.646911,508.239044,1001.419494, 4123319, 0, 12);
	AH(921,-2738.3206,801.5801,53.0625, 302.180999,300.722991,999.148437, 1258105, 0, 4);
	AH(922,-2738.3145,797.8579,53.2676, 302.180999,300.722991,999.148437, 6645652, 0, 4);
	AH(923,-2738.3247,789.1649,54.3828, 302.180999,300.722991,999.148437, 1235563, 0, 4);
	AH(924,-2738.3359,771.6172,54.3828, 318.564971,1118.209960,1083.882812, 3433563, 0, 5);
	AH(925,-2738.3472,758.8493,54.3828, 302.180999,300.722991,999.148437, 1533563, 0, 4);
	AH(926,-2738.3149,754.9096,52.7724, 302.180999,300.722991,999.148437, 8233563, 0, 4);
	AH(927,-2738.3496,746.6925,49.2035, 302.180999,300.722991,999.148437, 8457659, 0, 4);
	AH(928,-2731.5010,723.6882,41.2734, 302.180999,300.722991,999.148437, 12233563, 0, 4);
	AH(929,-2723.3350,722.8558,41.2660, 2807.619873,-1171.899902,1025.570312, 53, 0, 8);
	AH(930,-2710.8950,722.8580,39.7188, 302.180999,300.722991,999.148437, 23233563, 0, 4);
	AH(931,-2707.0503,722.6926,37.5391, 302.180999,300.722991,999.148437, 12733563, 0, 4);
	AH(932,-2686.2380,722.8572,32.2253, 302.180999,300.722991,999.148437, 8457659, 0, 4);
	AH(933,-2678.2905,722.2401,28.5978, 302.180999,300.722991,999.148437, 5813211, 0, 4);
	AH(934,-2665.4241,722.2523,27.9624, 444.646911,508.239044,1001.419494, 4900093, 0, 12);
	AH(935,-2661.6086,721.8848,27.9584, 302.180999,300.722991,999.148437, 6645652, 0, 4);
	AH(936,-2642.2473,728.0278,27.9609, 302.180999,300.722991,999.148437, 5445434, 0, 4);
	AH(937,-2640.2942,730.6750,30.0757, 302.180999,300.722991,999.148437, 5221555, 0, 4);
	AH(938,-2625.3518,732.9769,28.0276, 302.180999,300.722991,999.148437, 6645652, 0, 4);
	AH(939,-2622.1187,749.9287,31.4219, 302.180999,300.722991,999.148437, 5987648, 0, 4);
	AH(940,-2622.5095,757.8637,35.3281, 2807.619873,-1171.899902,1025.570312, 53, 0, 8);
	AH(941,-2622.5178,766.1020,36.8359, 302.180999,300.722991,999.148437, 5435345, 0, 4);
	AH(942,-2622.2695,772.3464,41.3425, 302.180999,300.722991,999.148437, 5438876, 0, 4);
	AH(943,-2622.0625,782.7430,44.8594, 318.564971,1118.209960,1083.882812, 1830493, 0, 5);
	AH(944,-2621.6487,790.8647,48.5785, 302.180999,300.722991,999.148437, 5435331, 0, 4);
	AH(945,-2621.6772,802.9641,49.9844, 302.180999,300.722991,999.148437, 5544563, 0, 4);
	AH(946,-2645.5100,803.0833,49.9766, 302.180999,300.722991,999.148437, 5123111, 0, 4);
	AH(947,-2659.8723,803.0905,49.9766, 302.180999,300.722991,999.148437, 5467755, 0, 4);
	AH(948,-2677.1931,803.0950,49.9766, 444.646911,508.239044,1001.419494, 4324449, 0, 12);
	AH(949,-2687.8181,803.1512,49.9766, 302.180999,300.722991,999.148437, 5211876, 0, 4);
	AH(950,-2698.8335,803.1536,49.9703, 302.180999,300.722991,999.148437, 4000900, 0, 4);
	AH(951,-2709.6997,803.0799,49.9766, 444.646911,508.239044,1001.419494, 4954354, 0, 12);
	AH(952,-2700.3569,820.5573,49.9844, 302.180999,300.722991,999.148437, 20000000, 0, 4);
	AH(953,-2685.0251,820.4976,49.9844, 302.180999,300.722991,999.148437, 5487455, 0, 4);
	AH(954,-2667.0532,820.3116,49.9844, 302.180999,300.722991,999.148437, 6534112, 0, 4);
	AH(955,-2652.2925,820.3203,49.9844, 318.564971,1118.209960,1083.882812, 5121361, 0, 5);
	AH(956,-2641.9912,820.3145,49.9844, 302.180999,300.722991,999.148437, 9039485, 0, 4);
	AH(957,-2618.7446,830.9504,49.9844, 2807.619873,-1171.899902,1025.570312, 53, 0, 8);
	AH(958,-2594.6902,830.8384,49.9844, 302.180999,300.722991,999.148437, 1234263, 0, 4);
	AH(959,-2593.7068,845.1542,50.5949, 302.180999,300.722991,999.148437, 1231245, 0, 4);
	AH(960,-2619.1184,845.1976,50.7898, 302.180999,300.722991,999.148437, 8755678, 0, 4);
	AH(961,-2592.7649,855.2098,53.5965, 302.180999,300.722991,999.148437, 9927346, 0, 4);
	AH(962,-2620.7021,855.0358,53.5687, 318.564971,1118.209960,1083.882812, 8733563, 0, 5);
	AH(963,-2619.9998,875.0974,58.9219, 302.180999,300.722991,999.148437, 19233563, 0, 4);
	AH(964,-2593.4231,874.8166,58.9219, 302.180999,300.722991,999.148437, 11233563, 0, 4);
	AH(965,-2593.2290,883.1776,63.2500, 444.646911,508.239044,1001.419494, 9923563, 0, 12);
	AH(966,-2620.2354,882.9911,63.2500, 302.180999,300.722991,999.148437, 1000394, 0, 4);
	AH(967,-2641.0776,935.7037,71.9531, 444.646911,508.239044,1001.419494, 4912563, 0, 12);
	AH(968,-2670.9844,927.4500,79.7031, 302.180999,300.722991,999.148437, 2012333, 0, 4);
	AH(969,-2660.3860,876.4128,79.7738, 318.564971,1118.209960,1083.882812, 1029351, 0, 5);
	AH(970,-2583.7192,896.2548,64.9844, 302.180999,300.722991,999.148437, 8457659, 0, 4);
	AH(971,-2573.3171,896.2627,64.9844, 444.646911,508.239044,1001.419494, 2938104, 0, 12);
	AH(972,-2566.6787,896.6540,64.9844, 302.180999,300.722991,999.148437, 5090471, 0, 4);
	AH(973,-2556.0576,896.6395,64.9844, 302.180999,300.722991,999.148437, 5328474, 0, 4);
	AH(974,-2541.5713,896.6541,64.9844, 2807.619873,-1171.899902,1025.570312, 5432423, 0, 8);
	AH(975,-2580.9158,920.3284,64.9844, 302.180999,300.722991,999.148437, 6546452, 0, 4);
	AH(976,-2570.0625,920.3801,64.9844, 302.180999,300.722991,999.148437, 9299138, 0, 4);
	AH(977,-2562.2485,920.3412,64.9844, 302.180999,300.722991,999.148437, 1236787, 0, 4);
	AH(978,-2551.7153,920.3799,64.9844, 302.180999,300.722991,999.148437, 9885122, 0, 4);
	AH(979,-2545.4561,920.3380,64.9766, 318.564971,1118.209960,1083.882812, 13243563, 0, 5);
	AH(980,-2540.1096,883.0641,63.2500, 302.180999,300.722991,999.148437, 5231563, 0, 4);
	AH(981,-2539.9932,874.8675,58.9219, 302.180999,300.722991,999.148437, 8457659, 0, 4);
	AH(982,-2540.6572,855.1663,53.1797, 444.646911,508.239044,1001.419494, 6523363, 0, 12);
	AH(983,-2539.4551,845.1772,50.6789, 302.180999,300.722991,999.148437, 9653563, 0, 4);
	AH(984,-2540.6211,832.3906,52.0938, 302.180999,300.722991,999.148437, 9813564, 0, 4);
	AH(985,-2548.3159,819.7708,49.9844, 302.180999,300.722991,999.148437, 6733523, 0, 4);
	AH(986,-2558.9260,819.6970,49.9844, 302.180999,300.722991,999.148437, 1438963, 0, 4);
	AH(987,-2565.8088,819.7975,49.9910, 444.646911,508.239044,1001.419494, 4901928, 0, 12);
	AH(988,-2576.4084,819.7880,49.9844, 318.564971,1118.209960,1083.882812, 5177726, 0, 5);
	AH(989,-2590.9260,819.7426,49.9910, 2807.619873,-1171.899902,1025.570312, 564823, 0, 8);
	AH(990,1122.9012,-2036.9612,69.8940, 1267.663208,-781.323242,1091.906250, 4000191, 0, 5);
	AH(991,691.3148,-1275.8959,13.5605, 225.630997,1022.479980,1084.069946, 20000000, 0, 7);
	AH(992, -2789.3010,-181.1865,10.0625, 225.756989,1240.000000,1082.149902, 2054984, 0, 2);
	AH(993,1331.9583,-632.9062,109.1349, 1267.663208,-781.323242,1091.906250, 8457659, 0, 5);

	SetTimer("rentfee", 1*60*60*1000, 1);//1 hour
}
	
public OnPlayerCommandText(playerid, cmdtext[])
{
    dcmd(buy,3,cmdtext);
	dcmd(sell,4,cmdtext);
	dcmd(enter,5,cmdtext);
	dcmd(exit,4,cmdtext);
	dcmd(lock,4,cmdtext);
	dcmd(unlock,6,cmdtext);
	dcmd(home,4,cmdtext);
	dcmd(setrent,7,cmdtext);
	dcmd(rent,4,cmdtext);
	dcmd(unrent,6,cmdtext);
	dcmd(househelp,9,cmdtext);
	dcmd(getrent,7,cmdtext);
	dcmd(payrent,7,cmdtext);
	
	
	if (strcmp("/visithouse", cmdtext, true) == 0)
    {
    new hid;
    hid = Gethi(playerid);
    if (strcmp(hInfo[hid][Name],"ForSale",true)) return SendClientMessage(playerid, c_r, "This house isn't for sale!");
    new str1[255],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerPos(playerid, housex[playerid], housey[playerid], housez[playerid]);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	GetPlayerName(playerid, pname, 24);
    playerworld[playerid] = GetPlayerVirtualWorld(playerid);
 	SendClientMessage(playerid, c_y, "You entered the house!");
    SetPlayerVirtualWorld(playerid, housenumber);
    SetPlayerInterior(playerid, hInfo[housenumber][Interior]);
	SetPlayerPos(playerid, hInfo[housenumber][InteriorX], hInfo[housenumber][InteriorY], hInfo[housenumber][InteriorZ]);
	playerinterior[playerid] = hInfo[housenumber][Interior];
	return 1;
	}
return 0;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
    if(Gethi(playerid) != -255) GetHouseStats(playerid, Gethi(playerid));
	return true;
}
forward HideDraw(playerid);
public HideDraw(playerid)
{
    TextDrawHideForPlayer(playerid, text28);
    TextDrawHideForPlayer(playerid, text29);
    TextDrawHideForPlayer(playerid, HOUSEBOX);
    TextDrawHideForPlayer(playerid, HSTATSBOX);
    TextDrawHideForPlayer(playerid, text34);
	TextDrawHideForPlayer(playerid, text30);
    TextDrawHideForPlayer(playerid, text31);
    TextDrawHideForPlayer(playerid, text32);
    TextDrawHideForPlayer(playerid, text33);
    new str2[256];
    format(str2, sizeof(str2), " ");
	TextDrawSetString(text32, str2);
	return 1;
}
AH(hi, Float:iconX, Float:iconY, Float:iconZ, Float:interiorX, Float:interiorY, Float:interiorZ, Costa, Sella, Interiora)
{
	new house[256];
	format(house, sizeof(house), "Houses/hi%d",hi);
	if(!dini_Exists(house))
	{
		dini_Create(house);
		format(hInfo[hi][Name], 24, "ForSale");
		dini_Set(house, "Name", "ForSale");
		format(hInfo[hi][Renter], 24, "ForRent");
		dini_Set(house, "Renter", "ForRent");
		hInfo[hi][Rentable] = 0;
		dini_IntSet(house, "Rentable", 0);
		hInfo[hi][Rentcost] = 0;
		dini_IntSet(house, "Rentcost", 0);
		hInfo[hi][Cost] = Costa;
		dini_IntSet(house, "Cost", Costa+00000);
		hInfo[hi][Sell] = Sella;
		dini_IntSet(house, "Sell", Sella);
		hInfo[hi][Interior] = Interiora;
		dini_IntSet(house, "Interior", Interiora);
		dini_IntSet(house, "Virtualworld", hi);
		hInfo[hi][Virtualworld] = hi;
		hInfo[hi][Locked] = 1;
		dini_IntSet(house, "Locked", 1);
		hInfo[hi][InteriorX] = interiorX;
		hInfo[hi][InteriorY] = interiorY;
		hInfo[hi][InteriorZ] = interiorZ;
		dini_FloatSet(house, "X", interiorX);
		dini_FloatSet(house, "Y", interiorY);
		dini_FloatSet(house, "Z", interiorZ);
		dini_IntSet(house, "RentPay", 0);
		dini_IntSet(house, "RentGet", 0);
		print("-");
		print("--------------House Created--------------");
		printf("- hi: %d", hi);
		printf("- Buy Cost: %d", Costa+0000);
		printf("- Sell Cost: %d", Sella);
		printf("- Interior: %d", Interiora);
		printf("- VirtualWorld: %d", hi);
		print("-----------------------------------------");
		print("-");
	}
	else
	{
	    format(hInfo[hi][Name], 24, dini_Get(house, "Name"));
	    format(hInfo[hi][Renter], 24, dini_Get(house, "Renter"));
		hInfo[hi][Rentable] = dini_Int(house, "Rentable");
		hInfo[hi][Rentcost] = dini_Int(house, "Rentcost");
	    hInfo[hi][Cost] = dini_Int(house, "Cost");
	    hInfo[hi][Sell] = dini_Int(house, "Sell");
	    hInfo[hi][Interior] = dini_Int(house, "Interior");
	    hInfo[hi][Locked] = dini_Int(house, "Locked");
	    hInfo[hi][InteriorX] = dini_Float(house, "X");
	    hInfo[hi][InteriorY] = dini_Float(house, "Y");
		hInfo[hi][InteriorZ] = dini_Float(house, "Z");
		hInfo[hi][Virtualworld] = dini_Int(house, "Virtualworld");
	}
    hInfo[hi][iconx]=iconX;
	hInfo[hi][icony]=iconY;
	hInfo[hi][iconz]=iconZ;
	format(house, sizeof(house), "Houses/hi%d",hi);
	if(strcmp(hInfo[hi][Name],"ForSale",true)==0)
	{
		HousePickup[hi] = CreatePickup(1273, 23, iconX, iconY, iconZ);//not bought
	}
	else
	{
		HousePickup[hi] = CreatePickup(1272,23, iconX, iconY, iconZ);//bought
	}
}

stock SpawnPlayerAtHouse(playerid)
{
	new str1[256],pname[24],str[256];
	GetPlayerName(playerid, pname, sizeof(pname));
	format(str1, sizeof(str1), "Houses/Users/%s.house", udb_encode(pname));
	if (dini_Exists(str1))
	{
		if(dini_Int(str1,"hi")!=-255)
		{
			new Float:x,Float:y,Float:z;
			str = dini_Get(str1,"SpawnInt");
			SetPlayerInterior(playerid, strval(str));
			playerinterior[playerid] = strval(str);
    		x = dini_Float(str1,"SpawnX");
	  		y = dini_Float(str1,"SpawnY");
	  		z = dini_Float(str1,"SpawnZ");
			SetPlayerPos(playerid, x, y, z);
			SetPlayerVirtualWorld(playerid,0);
		}
	}
	return 1;
}

stock GetHouseStats(playerid, hid)
{
    HideDraw(playerid);
    TextDrawShowForPlayer(playerid, text32);
    TextDrawShowForPlayer(playerid, text31);
    TextDrawShowForPlayer(playerid, text30);
    TextDrawShowForPlayer(playerid, text33);
    TextDrawShowForPlayer(playerid, text34);
    TextDrawShowForPlayer(playerid, HSTATSBOX);
	new str2[256];
	format(str2, sizeof(str2), "~n~Owned by: %s~n~~n~~n~~n~~w~Type ~r~/visithouse ~w~ for visit~n~~w~house~n~~w~Type ~r~/buy ~w~for buy house~n~~w~Type ~r~/houseshelp ~w~for more help", hInfo[hid][Name]);
	TextDrawSetString(text30, str2);
	hid = Gethi(playerid);
	if(strcmp(hInfo[hid][Renter],"ForRent",true))
	{
		format(str2, sizeof(str2), "~n~~n~Rented by: %s", hInfo[hid][Renter]);
		TextDrawSetString(text32, str2);
	}
	format(str2,sizeof(str2),"~n~~n~~n~Cost: %i",hInfo[hid][Cost]);
	TextDrawSetString(text31, str2);
	SetTimerEx("HideDraw", 15000, 0, "i", playerid);
}

dcmd_sell(playerid,params[])
{
	#pragma unused params
	new str[255],str1[256],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	if (strcmp(hInfo[housenumber][Name],pname,false)) return SendClientMessage(playerid, c_r, "This house isn't yours!");
 	SendClientMessage(playerid, c_y, "You have sold your house!");
  	format(str, sizeof(str), "%s has sold hi 0",pname);
	print(str);
	GivePlayerMoney(playerid, hInfo[housenumber][Sell]);
    dini_Set(str1, "Name", "ForSale");
    hInfo[housenumber][Locked] = dini_IntSet(str1,"Locked",1);
    format(hInfo[housenumber][Name],255,"ForSale");
	format(str1, sizeof(str1), "Houses/Users/%s.house", udb_encode(pname));
	if (!dini_Exists(str1)) dini_Create(str1);
	dini_IntSet(str1, "hi", -255);
	DestroyPickup(HousePickup[housenumber]);
	HousePickup[housenumber] = CreatePickup(1273, 23, hInfo[housenumber][iconx], hInfo[housenumber][icony], hInfo[housenumber][iconz]);
	RemovePlayerMapIcon(playerid, housemapicon[playerid]);
 	return 1;
}

dcmd_buy(playerid,params[])
{
    #pragma unused params
	new str[255],str1[255],pname[24], housenumber;
	housenumber = Gethi(playerid);
	if(housenumber == -1) return SendClientMessage(playerid, c_r, "You are not in a house icon!");

	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/Users/%s.house", udb_encode(pname));
	if(dini_Exists(str1))
	{
		if (dini_Int(str1, "hi")!=-255) return SendClientMessage(playerid, c_r, "You can only buy one house!");
	}
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	if (strcmp(hInfo[housenumber][Name],"ForSale",true)) return SendClientMessage(playerid, c_r, "This house isn't for sale!");
	if(GetPlayerMoney(playerid)<hInfo[housenumber][Cost]) return SendClientMessage(playerid, c_r, "Not enough money!");
	SendClientMessage(playerid, c_y, "You have bought the house!");
	format(str, sizeof(str), "%s has bought hi 0",pname);
	print(str);
	GivePlayerMoney(playerid, -hInfo[housenumber][Cost]);
    dini_Set(str1, "Name", pname);
    hInfo[housenumber][Name]=pname;
    hInfo[housenumber][Locked] = dini_IntSet(str1,"Locked",0);

	format(str1, sizeof(str1), "Houses/Users/%s.house", udb_encode(pname));
	if (!dini_Exists(str1)) dini_Create(str1);
	new Float:sy, Float:sx, Float:sz;
	dini_IntSet(str1, "hi", housenumber);
	if(!dini_Isset(str1,"Rentid"))
	{
		dini_IntSet(str1, "Rentid", -255);
	}
	GetPlayerPos(playerid, sx,sy,sz);
	dini_FloatSet(str1, "SpawnX", sx);
	dini_FloatSet(str1, "SpawnY", sy);
	dini_FloatSet(str1, "SpawnZ", sz);
	dini_IntSet(str1, "SpawnInt", GetPlayerInterior(playerid));
	DestroyPickup(HousePickup[housenumber]);
	HousePickup[housenumber] = CreatePickup(1272, 23, hInfo[housenumber][iconx], hInfo[housenumber][icony], hInfo[housenumber][iconz]);
	return 1;
}
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x); tempposy = (oldposy -y); tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{ return true; }
	return false;
}

dcmd_lock(playerid,params[])
{
    #pragma unused params
	new str1[256],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	if(strcmp(hInfo[housenumber][Name],pname,true)==0)
	{
 		SendClientMessage(playerid, c_y, "You have locked your house!");
    	dini_IntSet(str1,"Locked",1);
    	hInfo[housenumber][Locked] = 1;
    }
    else if(strcmp(hInfo[housenumber][Renter],pname,true)==0)
    {
        SendClientMessage(playerid, c_y, "You have locked your house!");
    	dini_IntSet(str1,"Locked",1);
    	hInfo[housenumber][Locked] = 1;
    }
    else
    {
        SendClientMessage(playerid, c_r, "This house isn't yours!");
    }
	return 1;
}

dcmd_unlock(playerid,params[])
{
    #pragma unused params
	new str1[256],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	if(strcmp(hInfo[housenumber][Name],pname,true)==0)
	{
 		SendClientMessage(playerid, c_y, "You have unlocked your house!");
    	dini_IntSet(str1,"Locked",0);
    	hInfo[housenumber][Locked] = 0;
    }
    else if(strcmp(hInfo[housenumber][Renter],pname,true)==0)
    {
        SendClientMessage(playerid, c_y, "You have unlocked your house!");
    	dini_IntSet(str1,"Locked",0);
    	hInfo[housenumber][Locked] = 0;
    }
    else
    {
        SendClientMessage(playerid, c_r, "This house isn't yours!");
    }
	return 1;
}

dcmd_enter(playerid,params[])
{
    #pragma unused params
	new str1[255],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerPos(playerid, housex[playerid], housey[playerid], housez[playerid]);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	GetPlayerName(playerid, pname, 24);
	if(hInfo[housenumber][Locked]==1) return SendClientMessage(playerid, c_r, "This house is locked!");
    playerworld[playerid] = GetPlayerVirtualWorld(playerid);
 	SendClientMessage(playerid, c_y, "You entered the house!");
    SetPlayerVirtualWorld(playerid, housenumber);
    SetPlayerInterior(playerid, hInfo[housenumber][Interior]);
	SetPlayerPos(playerid, hInfo[housenumber][InteriorX], hInfo[housenumber][InteriorY], hInfo[housenumber][InteriorZ]);
	playerinterior[playerid] = hInfo[housenumber][Interior];
   	return 1;
}

dcmd_exit(playerid,params[])
{
    #pragma unused params

	if(GetPlayerInterior(playerid)==playerinterior[playerid])
	{
		SetPlayerPos(playerid, housex[playerid], housey[playerid], housez[playerid]);
		SetPlayerInterior(playerid, playerworld[playerid]);
		SetPlayerVirtualWorld(playerid,0);
	}
	else
	{
		SendClientMessage(playerid, c_r, "You have not entered a house!");
	}
   	return 1;
}

dcmd_home(playerid,params[])
{
    #pragma unused params
	new str1[256],pname[24];
	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/Users/%s.house", udb_encode(pname));
	if(!dini_Exists(str1)) return SendClientMessage(playerid, c_r, "You don't own a house!");
	if(dini_Int(str1, "hi")!=-255)
	{
	    housemapicon[playerid] = SetPlayerMapIcon(playerid,31,hInfo[dini_Int(str1, "hi")][iconx], hInfo[dini_Int(str1, "hi")][icony], hInfo[dini_Int(str1, "hi")][iconz],31,c_y);
	}
	else if (dini_Int(str1, "Rentid")!=-255)
	{
	    housemapicon[playerid] = SetPlayerMapIcon(playerid,31,hInfo[dini_Int(str1, "Rentid")][iconx], hInfo[dini_Int(str1, "Rentid")][icony], hInfo[dini_Int(str1, "Rentid")][iconz],31,c_y);
	}
	else
	{
	    SendClientMessage(playerid, c_r, "You don't own a house!");
	}
	return 1;
}

dcmd_setrent(playerid,params[])
{
	new str[256],str1[256],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	str = dini_Get(str1,"Name");
	if (strcmp(str,pname,true)) return SendClientMessage(playerid, c_r, "This house isn't yours!");
	new rentcost, rentable;
	if (sscanf(params, "dd", rentable, rentcost)) return SendClientMessage(playerid, c_r, "USAGE: /setrent [0/1] [Rentcost]");
	else if (rentcost<MIN_RENTCOST)
	{
	    format(str, sizeof(str), "The minimum rentcost is $%i.", MIN_RENTCOST);
		SendClientMessage(playerid, c_r, str);
		return 1;
	}
	else if (rentcost>MAX_RENTCOST)
	{
	    format(str, sizeof(str), "The maximum rentcost is $%i.", MAX_RENTCOST);
		SendClientMessage(playerid, c_r, str);
		return 1;
	}
	else if(rentable==1)
	{
        SendClientMessage(playerid, c_y, "Your house is now rentable!");
        hInfo[housenumber][Rentable] = 1;
		dini_IntSet(str1, "Rentable", 1);
        hInfo[housenumber][Rentcost] = rentcost;
		dini_IntSet(str1, "Rentcost", rentcost);
        return 1;
	}
	else if(rentable==0)
	{
	    SendClientMessage(playerid, c_y, "Your house is now not rentable!");
	    hInfo[housenumber][Rentable] = 0;
		dini_IntSet(str1, "Rentable", 0);
	    hInfo[housenumber][Rentcost] = rentcost;
		dini_IntSet(str1, "Rentcost", rentcost);
	    return 1;
	}
	return 1;
}

dcmd_rent(playerid,params[])
{
    #pragma unused params
	new str[255],str1[256],str5[255],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	format(str5, sizeof(str5), "Houses/Users/%s.house", udb_encode(pname));
	if(fexist(str))
	{
	SendClientMessage(playerid,c_y,"You can't rent you house");
	}
	else
	if(dini_Isset(str5, "Rentid"))
	{
		if (dini_Int(str5, "Rentid")!=-255) return SendClientMessage(playerid, c_r, "You can only rent one house at a time!");
	}
	format(str, sizeof(str), dini_Get(str1,"Name"));
	if (strcmp(str,"ForSale",true)==0) return SendClientMessage(playerid, c_r, "This house has no owner!");
	if(hInfo[housenumber][Rentable]==0 || strcmp(hInfo[housenumber][Renter], "ForRent", true)) return SendClientMessage(playerid, c_r, "This house is not rentable!");
	if(GetPlayerMoney(playerid)<hInfo[housenumber][Rentcost]) return SendClientMessage(playerid, c_r, "Not enough money!");
	dini_Set(str1, "Renter", udb_encode(pname));
	format(hInfo[housenumber][Renter], 24, udb_encode(pname));
	dini_IntSet(str5, "Rentid", housenumber);
	format(str1, sizeof(str1), "You have rented this house, it will cost you $%i an hour!", hInfo[housenumber][Rentcost]);
	SendClientMessage(playerid, c_y, str1);
	return 1;
}

dcmd_unrent(playerid,params[])
{
    #pragma unused params
	new str1[256],pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	format(str1, sizeof(str1), "Houses/hi%d", housenumber);
	if(strcmp(hInfo[housenumber][Renter], pname, true)) return SendClientMessage(playerid, c_r, "You aren't renting this house!");

	dini_Set(str1, "Renter", "ForRent");
	format(hInfo[housenumber][Renter], 24, "ForRent");
	format(str1, sizeof(str1), "Houses/Users/%s.house", udb_encode(pname));
	dini_IntSet(str1, "Rentid", -255);
	SendClientMessage(playerid, c_y, "You have unrented this house!");
	return 1;
}

dcmd_househelp(playerid,params[])
{
	#pragma unused params
	HideDraw(playerid);
	TextDrawShowForPlayer(playerid, HOUSEBOX);
	TextDrawShowForPlayer(playerid, text28);
	TextDrawShowForPlayer(playerid, text29);
	return 1;
}

dcmd_getrent(playerid,params[])
{
	#pragma unused params
	new pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	if(strcmp(hInfo[housenumber][Name],pname,true)==0)
	{
	    new str[255];
 		SendClientMessage(playerid, c_y, "You collected the money of the renter!");
 		format(str, sizeof(str), "Houses/hi%d", housenumber);
    	GivePlayerMoney(playerid, dini_Int(str, "RentGet"));
    	dini_IntSet(str, "RentGet", 0);
    }
    else
    {
        SendClientMessage(playerid, c_r, "This house isn't yours!");
    }
    return 1;
}

dcmd_payrent(playerid,params[])
{
	#pragma unused params
	new pname[24],housenumber;
	housenumber = Gethi(playerid);
	GetPlayerName(playerid, pname, 24);
	if(strcmp(hInfo[housenumber][Renter],pname,true)==0)
	{
	    new str[255];
	    format(str, sizeof(str), "Houses/hi%d", housenumber);
	    if(GetPlayerMoney(playerid)<dini_Int(str, "RentPay")) return SendClientMessage(playerid, c_r, "You don't have enough money to pay the house owner!");
 		SendClientMessage(playerid, c_y, "You have payed the money to the owner!");
     	GivePlayerMoney(playerid, -dini_Int(str, "RentPay"));
    	dini_IntSet(str, "RentPay", 0);
    }
    else
    {
        SendClientMessage(playerid, c_r, "You aren't renting this house!");
    }
    return 1;
}
public rentfee()
{
	new str[255],str2[255],pname[24];
	for(new hi=0;hi<MAX_HOUSES;hi++)
	{
		format(str, sizeof(str), "Houses/hi%d", hi);
		if(strcmp(hInfo[hi][Renter], "ForRent", true))
		{
			for(new ii=0;ii<MAX_PLAYERS;ii++)
			{
		    	if(IsPlayerConnected(ii))
	  			{
	  		    	GetPlayerName(ii, pname, 24);
        			if(strcmp(hInfo[hi][Renter], pname, true)==0)
        			{
        	 		   	format(str2, sizeof(str2), "You have to pay $%d for the hour you have rented the hous!", hInfo[hi][Rentcost]);
        	 		   	SendClientMessage(ii, c_y, str2);
						dini_IntSet(str, "RentGet", dini_Int(str, "RentGet")+hInfo[hi][Rentcost]);
						dini_IntSet(str, "RentPay", dini_Int(str, "RentPay")+hInfo[hi][Rentcost]);
						hInfo[hi][Rentfee]=1;
					}
				}
			}
			if(hInfo[hi][Rentfee]==0)
			{
				    if(strcmp(hInfo[hi][Renter],"ForRent"))
				    {
				        dini_IntSet(str, "RentGet", dini_Int(str, "RentGet")+hInfo[hi][Rentcost]);
				        dini_IntSet(str, "RentPay", dini_Int(str, "RentPay")+hInfo[hi][Rentcost]);
				    }
			}
			hInfo[hi][Rentfee]=0;
		}
	}
}

stock Gethi(playerid)
{
	for(new i=0; i<MAX_HOUSES; i++)
	{
	    if(PlayerToPoint(MAX_DISTANCE_TO_PROP, playerid, hInfo[i][iconx], hInfo[i][icony], hInfo[i][iconz]))
	    {
	        return i;
		}
	}
	return -255;
}
//----------------------------------------------------------SSCANF------------------------------------------------------------------------------------
stock sscanf(string[], format[], {Float,_}:...)                                 // By Alex "Y_Less" Cole
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					ch,
					num = 0;
				while ((ch = string[stringPos]) > ' ' && ch != delim)
				{
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{
				setarg(paramPos, 0, _:floatstr(string[stringPos]));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos)) == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach (Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}
